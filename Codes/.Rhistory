xygrid = cbind(xygrid,
cN/(cN+sqrt(xygrid[,1]^2+xygrid[,2]^2)))
par(mfrow=c(1,2))
persp(pts, pts, matrix(xygrid[,3], nrow=lengrid, byrow=T),
main="Projection Depth",
xlab="x1", ylab="x2", zlab="PD(x,F)",
theta=-45, phi=45)
# projection quantile depth
# finding max through grid search
theta.vec = seq(0, 4*pi, by=.1)
u.grid = cbind(cos(theta.vec), sin(theta.vec))
len = nrow(xygrid)
pqd.vec = rep(0, len)
for(i in 1:len){
iu = xygrid[i,]
ifun=function(x) abs(pnorm(sum(x*iu), sd=sqrt(sum(iu^2)))-0.5)
funvals = apply(u.grid, 1, ifun)
pqd.vec[i] = 1/(1+max(funvals))
}
persp(pts, pts, matrix(pqd.vec, nrow=lengrid, byrow=T),
main="Projection Quantile Depth",
xlab="x1", ylab="x2", zlab="PQD(x,F)",
theta=-45, phi=45)
par(mfrow=c(1,1))
View(funvals)
View(pqd.vec)
warnings()
pts = seq(-1,1,by=.1)
lengrid = length(pts)
xcoord = rep(pts, rep(lengrid,lengrid))
ycoord = rep(pts, lengrid)
xygrid = cbind(xcoord,ycoord)
rm(xcoord,ycoord)
# Bivariate standard normal
# projection depth
cN = qnorm(.75)
xygrid = cbind(xygrid,
cN/(cN+sqrt(xygrid[,1]^2+xygrid[,2]^2)))
par(mfrow=c(1,2))
persp(pts, pts, matrix(xygrid[,3], nrow=lengrid, byrow=T),
main="Projection Depth",
xlab="x1", ylab="x2", zlab="PD(x,F)",
theta=-45, phi=45)
# projection quantile depth
# finding max through grid search
theta.vec = seq(0, 4*pi, by=.1)
u.grid = cbind(cos(theta.vec), sin(theta.vec))
len = nrow(xygrid)
pqd.vec = rep(0, len)
for(i in 1:len){
iu = u.grid[i,]
ifun=function(x) abs(pnorm(sum(x*iu), sd=sqrt(sum(iu^2)))-0.5)
funvals = apply(u.grid, 1, ifun)
pqd.vec[i] = 1/(1+max(funvals))
}
persp(pts, pts, matrix(pqd.vec, nrow=lengrid, byrow=T),
main="Projection Quantile Depth",
xlab="x1", ylab="x2", zlab="PQD(x,F)",
theta=-45, phi=45)
par(mfrow=c(1,1))
pts = seq(-1,1,by=.1)
lengrid = length(pts)
xcoord = rep(pts, rep(lengrid,lengrid))
ycoord = rep(pts, lengrid)
xygrid = cbind(xcoord,ycoord)
rm(xcoord,ycoord)
# Bivariate standard normal
# projection depth
cN = qnorm(.75)
xygrid = cbind(xygrid,
cN/(cN+sqrt(xygrid[,1]^2+xygrid[,2]^2)))
par(mfrow=c(1,2))
persp(pts, pts, matrix(xygrid[,3], nrow=lengrid, byrow=T),
main="Projection Depth",
xlab="x1", ylab="x2", zlab="PD(x,F)",
theta=-45, phi=45)
# projection quantile depth
# finding max through grid search
theta.vec = seq(0, 4*pi, by=.1)
u.grid = cbind(cos(theta.vec), sin(theta.vec))
len = nrow(xygrid)
pqd.vec = rep(0, len)
for(i in 1:len){
ix = xygrid[i,]
ifun=function(u) abs(pnorm(sum(ix*u), sd=sqrt(sum(u^2)))-0.5)
funvals = apply(u.grid, 1, ifun)
pqd.vec[i] = 1/(1+max(funvals))
}
persp(pts, pts, matrix(pqd.vec, nrow=lengrid, byrow=T),
main="Projection Quantile Depth",
xlab="x1", ylab="x2", zlab="PQD(x,F)",
theta=-45, phi=45)
par(mfrow=c(1,1))
ix
pts = seq(-1,1,by=.1)
lengrid = length(pts)
xcoord = rep(pts, rep(lengrid,lengrid))
ycoord = rep(pts, lengrid)
xygrid = cbind(xcoord,ycoord)
rm(xcoord,ycoord)
# Bivariate standard normal
# projection depth
cN = qnorm(.75)
xygrid = cbind(xygrid,
cN/(cN+sqrt(xygrid[,1]^2+xygrid[,2]^2)))
par(mfrow=c(1,2))
persp(pts, pts, matrix(xygrid[,3], nrow=lengrid, byrow=T),
main="Projection Depth",
xlab="x1", ylab="x2", zlab="PD(x,F)",
theta=-45, phi=45)
# projection quantile depth
# finding max through grid search
theta.vec = seq(0, 4*pi, by=.1)
u.grid = cbind(cos(theta.vec), sin(theta.vec))
len = nrow(xygrid)
pqd.vec = rep(0, len)
for(i in 1:len){
ix = xygrid[i,1:2]
ifun=function(u) abs(pnorm(sum(ix*u), sd=sqrt(sum(u^2)))-0.5)
funvals = apply(u.grid, 1, ifun)
pqd.vec[i] = 1/(1+max(funvals))
}
persp(pts, pts, matrix(pqd.vec, nrow=lengrid, byrow=T),
main="Projection Quantile Depth",
xlab="x1", ylab="x2", zlab="PQD(x,F)",
theta=-45, phi=45)
par(mfrow=c(1,1))
funvals
pts = seq(-1,1,by=.1)
lengrid = length(pts)
xcoord = rep(pts, rep(lengrid,lengrid))
ycoord = rep(pts, lengrid)
xygrid = cbind(xcoord,ycoord)
rm(xcoord,ycoord)
# Bivariate standard normal
# projection depth
cN = qnorm(.75)
xygrid = cbind(xygrid,
cN/(cN+sqrt(xygrid[,1]^2+xygrid[,2]^2)))
par(mfrow=c(1,2))
persp(pts, pts, matrix(xygrid[,3], nrow=lengrid, byrow=T),
main="Projection Depth",
xlab="x1", ylab="x2", zlab="PD(x,F)",
theta=-45, phi=45)
# projection quantile depth
# finding max through grid search
theta.vec = seq(0, 4*pi, by=.1)
u.grid = cbind(cos(theta.vec), sin(theta.vec))
len = nrow(xygrid)
pqd.vec = rep(0, len)
for(i in 1:len){
ix = xygrid[i,1:2]
ifun=function(u) abs(pnorm(sum(ix*u)/sqrt(sum(u^2)))-0.5)
funvals = apply(u.grid, 1, ifun)
pqd.vec[i] = 1/(1+max(funvals))
}
persp(pts, pts, matrix(pqd.vec, nrow=lengrid, byrow=T),
main="Projection Quantile Depth",
xlab="x1", ylab="x2", zlab="PQD(x,F)",
theta=-45, phi=45)
par(mfrow=c(1,1))
dep = cbind(xygrid[,3], pqd.vec)
View(Dep)
View(dep)
plot(dep)
plot(dep, type="l")
plot(xygrid[,3], pqd.vec, type="l", lwd=2,
main="Comparison of PD and PQD", xlab="PD", ylab="PQD")
?persp
persp(pts, pts, matrix(pqd.vec, nrow=lengrid, byrow=T), ticktype = "detailed",
main="Projection Quantile Depth",
xlab="x1", ylab="x2", zlab="PQD(x,F)",
theta=-45, phi=45)
?arctan
?cos
theta.vec = seq(0, 4*pi, by=.1)
u.grid = cbind(cos(theta.vec), sin(theta.vec))
theta.opt = atan(xygrid[,2]/xygrid[,1])
pqd.vec1 = cbind(cos(theta.opt), sin(theta.opt))
par(mfrow=c(1,2))
persp(pts, pts, matrix(pqd.vec1, nrow=lengrid, byrow=T), ticktype = "detailed",
main="Projection Quantile Depth: exact",
xlab="x1", ylab="x2", zlab="PQD(x,F)",
theta=-45, phi=45)
persp(pts, pts, matrix(pqd.vec, nrow=lengrid, byrow=T), ticktype = "detailed",
main="Projection Quantile Depth: approx",
xlab="x1", ylab="x2", zlab="PQD(x,F)",
theta=-45, phi=45)
par(mfrow=c(1,1))
persp(pts, pts, matrix(pqd.vec1, nrow=lengrid, byrow=T),
main="Projection Quantile Depth: exact",
xlab="x1", ylab="x2", zlab="PQD(x,F)",
theta=-45, phi=45)
head(pqd.vec1)
len
dim(u.vec1)
theta.opt = atan(xygrid[,2]/xygrid[,1])
u.opt = cbind(cos(theta.opt), sin(theta.opt))
for(i in 1:len){
ix = xygrid[i,1:2]
iu = u.opt[i,]
Oix = abs(pnorm(sum(ix*iu)/sqrt(sum(iu^2)))-0.5)
pqd.vec1[i] = 1/(1+Oix)
}
par(mfrow=c(1,2))
persp(pts, pts, matrix(pqd.vec1, nrow=lengrid, byrow=T),
main="Projection Quantile Depth: exact",
xlab="x1", ylab="x2", zlab="PQD(x,F)",
theta=-45, phi=45)
persp(pts, pts, matrix(pqd.vec, nrow=lengrid, byrow=T),
main="Projection Quantile Depth: approx",
xlab="x1", ylab="x2", zlab="PQD(x,F)",
theta=-45, phi=45)
par(mfrow=c(1,1))
pqd.vec1
rm(list=ls())
pts = seq(-1,1,by=.1)
lengrid = length(pts)
xcoord = rep(pts, rep(lengrid,lengrid))
ycoord = rep(pts, lengrid)
xygrid = cbind(xcoord,ycoord)
rm(xcoord,ycoord)
persp(pts, pts, matrix(xygrid[,3], nrow=lengrid, byrow=T),
main="Projection Depth",
xlab="x1", ylab="x2", zlab="PD(x,F)",
theta=-45, phi=45)
cN = qnorm(.75)
xygrid = cbind(xygrid,
cN/(cN+sqrt(xygrid[,1]^2+xygrid[,2]^2)))
persp(pts, pts, matrix(xygrid[,3], nrow=lengrid, byrow=T),
main="Projection Depth",
xlab="x1", ylab="x2", zlab="PD(x,F)",
theta=-45, phi=45)
len = nrow(xygrid)
pqd.vec = rep(0, len)
for(i in 1:len){
ix = xygrid[i,1:2]
ifun=function(u) abs(pnorm(sum(ix*u)/sqrt(sum(u^2)))-0.5)
funvals = apply(u.grid, 1, ifun)
pqd.vec[i] = 1/(1+max(funvals))
}
u.grid = cbind(cos(theta.vec), sin(theta.vec))
len = nrow(xygrid)
pqd.vec = rep(0, len)
for(i in 1:len){
ix = xygrid[i,1:2]
ifun=function(u) abs(pnorm(sum(ix*u)/sqrt(sum(u^2)))-0.5)
funvals = apply(u.grid, 1, ifun)
pqd.vec[i] = 1/(1+max(funvals))
}
theta.vec = seq(0, 4*pi, by=.1)
u.grid = cbind(cos(theta.vec), sin(theta.vec))
len = nrow(xygrid)
pqd.vec = rep(0, len)
for(i in 1:len){
ix = xygrid[i,1:2]
ifun=function(u) abs(pnorm(sum(ix*u)/sqrt(sum(u^2)))-0.5)
funvals = apply(u.grid, 1, ifun)
pqd.vec[i] = 1/(1+max(funvals))
}
theta.opt = atan(xygrid[,2]/xygrid[,1])
u.opt = cbind(cos(theta.opt), sin(theta.opt))
for(i in 1:len){
ix = xygrid[i,1:2]
iu = u.opt[i,]
Oix = abs(pnorm(sum(ix*iu)/sqrt(sum(iu^2)))-0.5)
pqd.vec1[i] = 1/(1+Oix)
}
theta.opt = atan(xygrid[,2]/xygrid[,1])
u.opt = cbind(cos(theta.opt), sin(theta.opt))
pqd.vec1 = rep(0, len)
for(i in 1:len){
ix = xygrid[i,1:2]
iu = u.opt[i,]
Oix = abs(pnorm(sum(ix*iu)/sqrt(sum(iu^2)))-0.5)
pqd.vec1[i] = 1/(1+Oix)
}
par(mfrow=c(1,2))
persp(pts, pts, matrix(pqd.vec1, nrow=lengrid, byrow=T),
main="Projection Quantile Depth: exact",
xlab="x1", ylab="x2", zlab="PQD(x,F)",
theta=-45, phi=45)
persp(pts, pts, matrix(pqd.vec, nrow=lengrid, byrow=T),
main="Projection Quantile Depth: approx",
xlab="x1", ylab="x2", zlab="PQD(x,F)",
theta=-45, phi=45)
par(mfrow=c(1,1))
View(cbind(pqd.vec,pqd.vec1))
theta.vec = seq(0, 4*pi, by=.1)
u.grid = cbind(cos(theta.vec), sin(theta.vec))
len = nrow(xygrid)
pqd.vec = rep(0, len)
for(i in 1:len){
ix = xygrid[i,1:2]
ifun=function(u) abs(pnorm(sum(ix*u))-0.5)
funvals = apply(u.grid, 1, ifun)
pqd.vec[i] = 1/(1+max(funvals))
}
theta.opt = atan(xygrid[,2]/xygrid[,1])
u.opt = cbind(cos(theta.opt), sin(theta.opt))
pqd.vec1 = rep(0, len)
for(i in 1:len){
ix = xygrid[i,1:2]
iu = u.opt[i,]
Oix = abs(pnorm(sum(ix*iu))-0.5)
pqd.vec1[i] = 1/(1+Oix)
}
par(mfrow=c(1,2))
persp(pts, pts, matrix(pqd.vec1, nrow=lengrid, byrow=T),
main="Projection Quantile Depth: exact",
xlab="x1", ylab="x2", zlab="PQD(x,F)",
theta=-45, phi=45)
persp(pts, pts, matrix(pqd.vec, nrow=lengrid, byrow=T),
main="Projection Quantile Depth: approx",
xlab="x1", ylab="x2", zlab="PQD(x,F)",
theta=-45, phi=45)
par(mfrow=c(1,1))
theta.opt
pi/2
View(cbind(xygrid, theta.opt))
which.na(theta.opt)
which(is.na(theta.opt))
theta.vec = seq(0, 4*pi, by=.1)
u.grid = cbind(cos(theta.vec), sin(theta.vec))
len = nrow(xygrid)
pqd.vec = rep(0, len)
for(i in 1:len){
ix = xygrid[i,1:2]
ifun=function(u) abs(pnorm(sum(ix*u))-0.5)
funvals = apply(u.grid, 1, ifun)
pqd.vec[i] = 1/(1+max(funvals))
}
theta.opt = atan(xygrid[,2]/xygrid[,1])
which(is.na(theta.opt)) = pi/2 # takes care of x = (0,0)
u.opt = cbind(cos(theta.opt), sin(theta.opt))
pqd.vec1 = rep(0, len)
for(i in 1:len){
ix = xygrid[i,1:2]
iu = u.opt[i,]
Oix = abs(pnorm(sum(ix*iu))-0.5)
pqd.vec1[i] = 1/(1+Oix)
}
par(mfrow=c(1,2))
persp(pts, pts, matrix(pqd.vec1, nrow=lengrid, byrow=T),
main="Projection Quantile Depth: exact",
xlab="x1", ylab="x2", zlab="PQD(x,F)",
theta=-45, phi=45)
persp(pts, pts, matrix(pqd.vec, nrow=lengrid, byrow=T),
main="Projection Quantile Depth: approx",
xlab="x1", ylab="x2", zlab="PQD(x,F)",
theta=-45, phi=45)
par(mfrow=c(1,1))
theta.opt[which(is.na(theta.opt))] = pi/2 # takes care of x = (0,0)
theta.vec = seq(0, 4*pi, by=.1)
u.grid = cbind(cos(theta.vec), sin(theta.vec))
len = nrow(xygrid)
pqd.vec = rep(0, len)
for(i in 1:len){
ix = xygrid[i,1:2]
ifun=function(u) abs(pnorm(sum(ix*u))-0.5)
funvals = apply(u.grid, 1, ifun)
pqd.vec[i] = 1/(1+max(funvals))
}
theta.opt = atan(xygrid[,2]/xygrid[,1])
theta.opt[which(is.na(theta.opt))] = pi/2 # takes care of x = (0,0)
u.opt = cbind(cos(theta.opt), sin(theta.opt))
pqd.vec1 = rep(0, len)
for(i in 1:len){
ix = xygrid[i,1:2]
iu = u.opt[i,]
Oix = abs(pnorm(sum(ix*iu))-0.5)
pqd.vec1[i] = 1/(1+Oix)
}
par(mfrow=c(1,2))
persp(pts, pts, matrix(pqd.vec1, nrow=lengrid, byrow=T),
main="Projection Quantile Depth: exact",
xlab="x1", ylab="x2", zlab="PQD(x,F)",
theta=-45, phi=45)
persp(pts, pts, matrix(pqd.vec, nrow=lengrid, byrow=T),
main="Projection Quantile Depth: approx",
xlab="x1", ylab="x2", zlab="PQD(x,F)",
theta=-45, phi=45)
par(mfrow=c(1,1))
View(cbind(pqd.vec, pqd.vec1))
sum(abs(pqd.vec-pqd.vec1))
rm(list=ls())
pts = seq(-1,1,by=.1)
lengrid = length(pts)
xcoord = rep(pts, rep(lengrid,lengrid))
ycoord = rep(pts, lengrid)
xygrid = cbind(xcoord,ycoord)
rm(xcoord,ycoord)
# Bivariate standard normal
# projection depth
cN = qnorm(.75)
xygrid = cbind(xygrid,
cN/(cN+sqrt(xygrid[,1]^2+xygrid[,2]^2)))
par(mfrow=c(1,2))
persp(pts, pts, matrix(xygrid[,3], nrow=lengrid, byrow=T),
main="Projection Depth",
xlab="x1", ylab="x2", zlab="PD(x,F)",
theta=-45, phi=45)
# projection quantile depth
# finding max through grid search
theta.opt = atan(xygrid[,2]/xygrid[,1])
theta.opt[which(is.na(theta.opt))] = pi/2 # takes care of x = (0,0)
u.opt = cbind(cos(theta.opt), sin(theta.opt))
pqd.vec = rep(0, len)
for(i in 1:len){
ix = xygrid[i,1:2]
iu = u.opt[i,]
Oix = abs(pnorm(sum(ix*iu))-0.5)
pqd.vec[i] = 1/(1+Oix)
}
persp(pts, pts, matrix(pqd.vec, nrow=lengrid, byrow=T),
main="Projection Quantile Depth: approx",
xlab="x1", ylab="x2", zlab="PQD(x,F)",
theta=-45, phi=45)
par(mfrow=c(1,1))
par(mfrow=c(1,2))
persp(pts, pts, matrix(xygrid[,3], nrow=lengrid, byrow=T),
main="Projection Depth",
xlab="x1", ylab="x2", zlab="PD(x,F)",
theta=-45, phi=45)
# projection quantile depth
# finding max through grid search
theta.opt = atan(xygrid[,2]/xygrid[,1])
theta.opt[which(is.na(theta.opt))] = pi/2 # takes care of x = (0,0)
u.opt = cbind(cos(theta.opt), sin(theta.opt))
len = nrow(xygrid)
pqd.vec = rep(0, len)
for(i in 1:len){
ix = xygrid[i,1:2]
iu = u.opt[i,]
Oix = abs(pnorm(sum(ix*iu))-0.5)
pqd.vec[i] = 1/(1+Oix)
}
persp(pts, pts, matrix(pqd.vec, nrow=lengrid, byrow=T),
main="Projection Quantile Depth: approx",
xlab="x1", ylab="x2", zlab="PQD(x,F)",
theta=-45, phi=45)
par(mfrow=c(1,1))
# comparing PD and PQD
plot(xygrid[,3], pqd.vec, type="l", lwd=2,
main="Comparison of PD and PQD", xlab="PD", ylab="PQD")
pts = seq(-1,1,by=.1)
lengrid = length(pts)
xcoord = rep(pts, rep(lengrid,lengrid))
ycoord = rep(pts, lengrid)
xygrid = cbind(xcoord,ycoord)
rm(xcoord,ycoord)
# Bivariate standard normal
# projection depth
cN = qnorm(.75)
xygrid = cbind(xygrid,
cN/(cN+sqrt(xygrid[,1]^2+xygrid[,2]^2)))
par(mfrow=c(1,2))
persp(pts, pts, matrix(xygrid[,3], nrow=lengrid, byrow=T),
main="Projection Depth",
xlab="x1", ylab="x2", zlab="PD(x,F)",
theta=-45, phi=45)
# projection quantile depth
# finding max through grid search
theta.opt = atan(xygrid[,2]/xygrid[,1])
theta.opt[which(is.na(theta.opt))] = pi/2 # takes care of x = (0,0)
u.opt = cbind(cos(theta.opt), sin(theta.opt))
len = nrow(xygrid)
pqd.vec = rep(0, len)
for(i in 1:len){
ix = xygrid[i,1:2]
iu = u.opt[i,]
Oix = abs(pnorm(sum(ix*iu))-0.5)
pqd.vec[i] = 1/(1+Oix)
}
persp(pts, pts, matrix(pqd.vec, nrow=lengrid, byrow=T),
main="Projection Quantile Depth: approx",
xlab="x1", ylab="x2", zlab="PQD(x,F)",
theta=-45, phi=45)
par(mfrow=c(1,1))
# comparing PD and PQD
plot(xygrid[,3], pqd.vec, type="l", lwd=2,
main="Comparison of PD and PQD", xlab="PD", ylab="PQD")
pts = seq(-1,1,by=.1)
lengrid = length(pts)
xcoord = rep(pts, rep(lengrid,lengrid))
ycoord = rep(pts, lengrid)
xygrid = cbind(xcoord,ycoord)
rm(xcoord,ycoord)
cN = qnorm(.75)
xygrid = cbind(xygrid,
cN/(cN+sqrt(xygrid[,1]^2+xygrid[,2]^2)))
par(mfrow=c(1,2))
persp(pts, pts, matrix(xygrid[,3], nrow=lengrid, byrow=T),
main="Projection Depth",
xlab="x1", ylab="x2", zlab="PD(x,F)",
theta=-45, phi=45)
theta.opt = atan(xygrid[,2]/xygrid[,1])
theta.opt[which(is.na(theta.opt))] = pi/2 # takes care of x = (0,0)
u.opt = cbind(cos(theta.opt), sin(theta.opt))
len = nrow(xygrid)
pqd.vec = rep(0, len)
for(i in 1:len){
ix = xygrid[i,1:2]
iu = u.opt[i,]
Oix = abs(pnorm(sum(ix*iu))-0.5)
pqd.vec[i] = 1/(1+Oix)
}
persp(pts, pts, matrix(pqd.vec, nrow=lengrid, byrow=T),
main="Projection Quantile Depth",
xlab="x1", ylab="x2", zlab="PQD(x,F)",
theta=-45, phi=45)
par(mfrow=c(1,1))
