class(x)
factor(x)
x=1.1:10
x=seq(1,.1,2)
?seq
x=seq(1,2,.1)
x
factor(x)
B = lm(log(acrePrice)~1+fyear, data=MinnLand)
MinnLand$fyear = factor(paste(MinnLand$year))
B = lm(log(acrePrice)~1+fyear, data=MinnLand)
B = lm(log(acrePrice)~fyear, data=MinnLand)
summary(B)
B = lm(log(acrePrice)~1+fyear, data=MinnLand)
summary(B)
anova(A,B)
library(alr3)
pureErrorAnova(A)
library(MASS)
boxcox(lm(Distance~Speed, data=stopping))
names(z)
z = boxcox(lm(Distance~Speed, data=stopping))
names(z)
z$x[which.max(z.y)]
z$x[which.max(z$y)]
invResPlot(lm(Distance~Speed, data=stopping))
par(mfrow=c(1,3))
plot(Distance~1/Speed, stopping)
plot(Distance~log(Speed), stopping)
plot(Distance~Speed, stopping)
par(mfrow=c(1,1))
plot(Distance~Speed^2, stopping)
reg1 = lm(Distance~Speed+I(Speed^2),
weight=Speed^2, data=stopping)
reg2 = lm(Distance^.5~Speed, data=stopping)
plot(Distance~Speed, data=stopping)
lines(fitted.values(reg1)~stopping$Speed,
type = "l",col = "blue")
lines((fitted.values(reg2))^2~stopping$Speed,
type = "l",col = "red")
reg1 = lm(Distance~Speed+I(Speed^2),
weight=1/Speed^2, data=stopping)
plot(Distance~Speed, data=stopping)
lines(fitted.values(reg1)~stopping$Speed,
type = "l",col = "blue")
Fuel = c(514.279, 374.164, 426.349, 842.792, 317.492)
ehat = c(-163.145, -137.599, -102.409, -183.499, -49.452)
h = c(.256, .162, .206, .084, .415)
sighat = 64.891
n = 51; p1 = 5
r = ehat/(sighat*sqrt(1-h))
t = r*sqrt((n-p1-1)/(n-p1-r^2))
D = r^2*h/(p1*(1-h))
d = (data.frame(cbind(r,t,D),
row.names = c("Alaska", "NY", "Hawaii", "Wyoming", "Dist. Col")))
pmin(n*2*pt(-abs(t),46),1)
rm(list=ls());
library(inline)
library(Rcpp)
library(RcppArmadillo)
library(RcppEigen)
sourceCpp("DataDepth.cpp", verbose=TRUE, rebuild=FALSE);
sourceCpp("ProjQuant.cpp", verbose=TRUE, rebuild=FALSE);
setwd("C:/Study/My projects/Quantiles/Codes")
rm(list=ls());
library(inline)
library(Rcpp)
library(RcppArmadillo)
library(RcppEigen)
sourceCpp("DataDepth.cpp", verbose=TRUE, rebuild=FALSE);
sourceCpp("ProjQuantile.cpp", verbose=TRUE, rebuild=FALSE);
rm(list=ls())
set.seed(123)
n<-1000;
library(inline)
library(Rcpp)
library(RcppArmadillo)
library(RcppEigen)
sourceCpp("DataDepth.cpp", verbose=TRUE, rebuild=FALSE);
#x1<-rnorm(n,0,1);
#x2<-rnorm(n,0,5);
#d<-cbind(x1,x2);
x1<-rnorm(n,0,10);
x1<-x1+min(x1)*0.5;
x2<-rnorm(n,0,6);
th<-pi/4;
r=function(th)return(cbind(c(cos(th),sin(th)),c(-sin(th),cos(th))));
dat<-cbind(x1,x2);
dat45<-dat%*%r(th);
th<-3*pi/4;
dat135<-dat%*%r(th);
d<-rbind(dat45,dat135);
d<-apply(d,2,FUN=function(x){return((x-mean(x))/max(x))});
x<-c(0,0);
e<-c(0,0);
p<-QuadrantFrac(d,x,e);
print(p);
q<-ecdf(d,x);
print(q);
k<-100;
x3<-seq(min(d[,1]), max(d[,1]),length.out=k);
x4<-seq(min(d[,2]), max(d[,2]),length.out=k);
xx<-expand.grid(x=x3,y=x4);
xx<-as.matrix(xx);
z<-ecdfGrid(d,xx);
y<-matrix(nrow=k, ncol=k);
for(i in 1:k){
for(j in 1:k){
x<-c(x3[i],x4[j]);
y[i,j]<-ecdf(d,x);
}
}
res<-persp(x3, x4, y, theta=-45, phi=45, shade=TRUE, col=5);
p<-c(0,0);
dep<-depthx(d,p);
med<-medianp(d);
library(scatterplot3d)
library(rgl)
dep1<-DepthGrid(d);
scatterplot3d(d[,1],d[,2],dep1, pch=".", highlight.3d=TRUE)
plot3d(d[,1], d[,2], dep1, col="red", size=3);
rm(list=ls())
set.seed(123)
n<-10000;
library(inline)
library(Rcpp)
library(RcppArmadillo)
library(RcppEigen)
sourceCpp("ProjQuant.cpp", verbose=TRUE, rebuild=FALSE);
x1<-rnorm(n,0,10);
x1<-x1+min(x1)*0.5;
x2<-rnorm(n,0,6);
th<-pi/4;
r=function(th)return(cbind(c(cos(th),sin(th)),c(-sin(th),cos(th))));
dat<-cbind(x1,x2);
dat45<-dat%*%r(th);
th<-3*pi/4;
dat135<-dat%*%r(th);
d<-rbind(dat45,dat135);
d<-apply(d,2,FUN=function(x){return((x-mean(x))/max(x))});
plot(d[,1],d[,2],pch=".",)
u=c(0,0.9);
x<-ProjQuant(d,u,1000);
lines(x[,1],x[,2],col=3);
y<-WtProjQuantProfile(d,u,1000,100,0.5,0.2,0.9);
lines(y[,1],y[,2],col=4);
library(inline)
library(Rcpp)
library(RcppArmadillo)
library(RcppEigen)
sourceCpp("ProjQuantile.cpp", verbose=TRUE, rebuild=FALSE);
x1<-rnorm(n,0,10);
x1<-x1+min(x1)*0.5;
x2<-rnorm(n,0,6);
th<-pi/4;
r=function(th)return(cbind(c(cos(th),sin(th)),c(-sin(th),cos(th))));
dat<-cbind(x1,x2);
dat45<-dat%*%r(th);
th<-3*pi/4;
dat135<-dat%*%r(th);
d<-rbind(dat45,dat135);
d<-apply(d,2,FUN=function(x){return((x-mean(x))/max(x))});
plot(d[,1],d[,2],pch=".",)
u=c(0,0.9);
x<-ProjQuant(d,u,1000);
lines(x[,1],x[,2],col=3);
y<-WtProjQuantProfile(d,u,1000,100,0.5,0.2,0.9);
lines(y[,1],y[,2],col=4);
r<-apply(y,1,FUN=function(x){return(sqrt(x[1]^2+x[2]^2))})
theta<-seq(0,2*pi,length.out=dim(y)[1]);
m<-ksmooth(theta,r,kernel="normal", bandwidth=(0.1*1.06*sd(r)^(-0.2)));
xx<-m$y*cos(m$x);
yy<-m$y*sin(m$x);
lines(xx,yy, col=2, pch=".");
x1<-rnorm(n,0,1);
x2<-rnorm(n,0,5);
d<-cbind(x1,x2);
z<-vector(mode="numeric", length=dim(d)[1]);
for(i in 1:dim(d)[1]){
z[i]<-ProjQuantileDepth(d,d[i,],5,0.5,0.2,0.8);
}
library(scatterplot3d)
library(rgl)
plot3d(d[,1], d[,2], z, col="red", size=3);
rm(list=ls())
set.seed(123)
n<-10000;
library(inline)
library(Rcpp)
library(RcppArmadillo)
library(RcppEigen)
sourceCpp("ProjQuantile.cpp", verbose=TRUE, rebuild=FALSE);
x1<-rnorm(n,0,10);
x1<-x1+min(x1)*0.5;
x2<-rnorm(n,0,6);
th<-pi/4;
r=function(th) return(cbind(c(cos(th),sin(th)),c(-sin(th),cos(th))));
dat<-cbind(x1,x2);
dat45<-dat%*%r(th);
th<-3*pi/4;
dat135<-dat%*%r(th);
d<-rbind(dat45,dat135);
d<-apply(d,2,FUN=function(x){return((x-mean(x))/max(x))});
plot(d[,1],d[,2],pch=".",)
u=c(0,0.9);
x<-ProjQuant(d,u,1000);
lines(x[,1],x[,2],col=3);
sourceCpp("../ProjQuantile.cpp", verbose=TRUE, rebuild=FALSE);
sourceCpp("..\ProjQuantile.cpp", verbose=TRUE, rebuild=FALSE);
sourceCpp("..\ProjQuantile.cpp", verbose=TRUE, rebuild=FALSE);
sourceCpp("../ProjQuantile.cpp", verbose=TRUE, rebuild=FALSE);
dim(dat45)
dim(dat135)
d<-rbind(dat45,dat135);
plot(d[,1],d[,2],pch=".",)
matrix(c(1,.5,.5,1), nrow=2)
X1 = my.mvrnorm(1000, mu=c(0,0), Sigma=matrix(c(1,.5,.5,1), nrow=2))
my.mvrnorm = function(n, mu, Sigma){
p = length(mu)
# compute square root of covariance matrix
eo=eigen(Sigma, symmetric=TRUE)
sigma.sqrt=eo$vec%*%diag(eo$val^0.5)%*%t(eo$vec)
# generate random normals from runif by box-muller transform
rnorm.vec = sqrt(-2*log(runif(n*p)))*cos(2*pi*runif(n*p))
# generate sample matrix
sample.matrix = matrix(rep(mu, n), nrow=n, byrow=T) +
matrix(rnorm.vec, nrow=n, ncol=p)%*%sigma.sqrt
return(sample.matrix)
}
## Simulating from Bivariate normal, mean (0,0), Sigma = ((1 .5), (.5 1))
X1 = my.mvrnorm(1000, mu=c(0,0), Sigma=matrix(c(1,.5,.5,1), nrow=2))
plot(X1)
head(X1)
plot(X1, pch=19, color=adjustcolor("black", alpha.f=.5))
plot(X1, pch=19, col=adjustcolor("black", alpha.f=.1))
plot(X1, pch=19, col=adjustcolor("black", alpha.f=.5))
plot(X1, pch=19, col=adjustcolor("black", alpha.f=.5), cex=.5)
X1.pq = ProjQuant(X1, c(0,.9), 1000)
lines(X1.pq[,1], X1.pq[,2], lwd=2, col="blue")
X1.wpq = WtProjQuantProfile(X1, c(0,.9), 1000, 100, 0.5, 0.2, 0.9)
lines(X1.wpq[,1], X1.wpq[,2], lwd=2, col="green")
lines(X1.wpq[,1], X1.wpq[,2], lwd=2, col="darkgreen")
plot(X1, pch=19, cex=.5)
lines(X1.pq[,1], X1.pq[,2], lwd=2, col="blue")
lines(X1.wpq[,1], X1.wpq[,2], lwd=2, col="darkgreen")
X1 = my.mvrnorm(n, mu=c(0,0), Sigma=matrix(c(1,.5,.5,1), nrow=2))
plot(X1)
X1.pq = ProjQuant(X1, c(0,.9), 1000)
X1.wpq = WtProjQuantProfile(X1, c(0,.9), 1000, 100, 0.5, 0.2, 0.9)
plot(X1, pch=19, cex=.1)
lines(X1.pq[,1], X1.pq[,2], lwd=2, col="blue")
lines(X1.wpq[,1], X1.wpq[,2], lwd=2, col="darkgreen")
plot(X1, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.5))
lines(X1.pq[,1], X1.pq[,2], lwd=2, col="blue")
lines(X1.wpq[,1], X1.wpq[,2], lwd=2, col="darkgreen")
sig = matrix(c(1,.5,.5,1), nrow=2)
install.packages("ellipse")
require(ellipse); lines(ellipse(sig), col="red")
plot(X1, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.5))
lines(X1.pq[,1], X1.pq[,2], lwd=2, col="blue")
lines(X1.wpq[,1], X1.wpq[,2], lwd=2, col="darkgreen")
# normal confidence ellipsoid
require(ellipse); lines(ellipse(sig, level=.9), col="red")
plot(X1, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.3))
lines(X1.pq[,1], X1.pq[,2], lwd=2, col="blue")
lines(X1.wpq[,1], X1.wpq[,2], lwd=2, col="darkgreen")
# normal confidence ellipsoid
require(ellipse); lines(ellipse(sig, level=.9), col="red")
n = 1e3
## Simulating from Bivariate normal, mean (0,0), Sigma = ((1 .5), (.5 1))
sig = matrix(c(1,.5,.5,1), nrow=2)
X1 = my.mvrnorm(n, mu=c(0,0), Sigma=sig)
X1.pq = ProjQuant(X1, c(0,.9), 1000)
X1.wpq = WtProjQuantProfile(X1, c(0,.9), 1000, 100, 0.5, 0.2, 0.9)
plot(X1, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.3))
lines(X1.pq[,1], X1.pq[,2], lwd=2, col="blue")
lines(X1.wpq[,1], X1.wpq[,2], lwd=2, col="darkgreen")
# normal confidence ellipsoid
require(ellipse); lines(ellipse(sig, level=.9), col="red")
X1.wpq = WtProjQuantProfile(X1, c(0,.9), 1000, 1000, 0.5, 0.2, 0.9)
plot(X1, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.3))
lines(X1.pq[,1], X1.pq[,2], lwd=2, col="blue")
lines(X1.wpq[,1], X1.wpq[,2], lwd=2, col="darkgreen")
# normal confidence ellipsoid
require(ellipse); lines(ellipse(sig, level=.9), col="red")
X1.wpq = WtProjQuantProfile(X1, c(0,.9), 1000, 100, 0.5, 0.2, 0.9)
plot(X1, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.3))
lines(X1.pq[,1], X1.pq[,2], lwd=2, col="blue")
lines(X1.wpq[,1], X1.wpq[,2], lwd=2, col="darkgreen")
# normal confidence ellipsoid
require(ellipse); lines(ellipse(sig, level=.9), col="red")
n = 1e4
## Simulating from Bivariate normal, mean (0,0), Sigma = ((1 .5), (.5 1))
sig = matrix(c(1,.5,.5,1), nrow=2)
X1 = my.mvrnorm(n, mu=c(0,0), Sigma=sig)
X1.pq = ProjQuant(X1, c(0,.9), 1000)
X1.wpq = WtProjQuantProfile(X1, c(0,.9), 1000, 100, 0.5, 0.2, 0.9)
plot(X1, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.3))
lines(X1.pq[,1], X1.pq[,2], lwd=2, col="blue")
lines(X1.wpq[,1], X1.wpq[,2], lwd=2, col="darkgreen")
# normal confidence ellipsoid
require(ellipse); lines(ellipse(sig, level=.9), col="red")
plot(X1, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.3))
lines(X1.pq[,1], X1.pq[,2], lwd=2, col="blue")
lines(X1.wpq[,1], X1.wpq[,2], lwd=2, col="darkgreen")
# normal confidence ellipsoid
require(ellipse); lines(ellipse(sig, level=.9), col="red", lwd=2, lty=2)
plot(X1, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.3))
# normal confidence ellipsoid
require(ellipse); lines(ellipse(sig, level=.9), col="red", lwd=2, lty=2)
lines(X1.pq[,1], X1.pq[,2], lwd=2, col="blue")
lines(X1.wpq[,1], X1.wpq[,2], lwd=2, col="darkgreen")
X21 = my.mvrnorm(5e3, mu=c(2,0), Sigma=sig)
X22 = my.mvrnorm(5e3, mu=c(-2,0), matrix(c(1,-.5,-.5,1), nrow=2))
X2 = rbind(X21,X22)
plot(X2, pch=19, cex=.1)
X2 = rbind(X21,X22)
lines(X2.pq[,1], X2.pq[,2], lwd=2, col="blue")
X2.pq = ProjQuant(X2, c(0,.9), 1000)
X2.wpq = WtProjQuantProfile(X2, c(0,.9), 1000, 100, 0.5, 0.2, 0.9)
lines(X2.pq[,1], X2.pq[,2], lwd=2, col="blue")
lines(X2.wpq[,1], X2.wpq[,2], lwd=2, col="darkgreen")
plot3d(d[,1], d[,2], z, col="red", size=3);
plot(X1, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.3))
# normal confidence ellipsoid
require(ellipse); lines(ellipse(sig, level=.9), col="red", lwd=2, lty=2)
lines(X1.pq[,1], X1.pq[,2], lwd=2, col="blue")
lines(X1.wpq[,1], X1.wpq[,2], lwd=2, col="darkgreen")
X31 = my.mvrnorm(5e3, mu=c(2,0), Sigma=sig)
X32 = my.mvrnorm(5e3, mu=c(-2,0), matrix(c(.8,-.4,-.4,.8), nrow=2))
X3 = rbind(X31,X32)
X3.pq = ProjQuant(X3, c(0,.9), 1000)
X3.wpq = WtProjQuantProfile(X3, c(0,.9), 1000, 100, 0.5, 0.2, 0.9)
plot(X3, pch=19, cex=.1)
lines(X3.pq[,1], X2.pq[,2], lwd=2, col="blue")
lines(X3.wpq[,1], X2.wpq[,2], lwd=2, col="darkgreen")
plot(X2, pch=19, cex=.1)
lines(X2.pq[,1], X2.pq[,2], lwd=2, col="blue")
lines(X2.wpq[,1], X2.wpq[,2], lwd=2, col="darkgreen")
sig2 = matrix(c(1,-.5,-.5,1), nrow=2)
X31 = my.mvrnorm(5e3, mu=c(2,0), Sigma=sig)
X32 = my.mvrnorm(5e3, mu=c(-2,0), Sigma=.5*sig2)
X3 = rbind(X31,X32)
X3.pq = ProjQuant(X3, c(0,.9), 1000)
X3.wpq = WtProjQuantProfile(X3, c(0,.9), 1000, 100, 0.5, 0.2, 0.9)
plot(X3, pch=19, cex=.1)
lines(X3.pq[,1], X2.pq[,2], lwd=2, col="blue")
lines(X3.wpq[,1], X2.wpq[,2], lwd=2, col="darkgreen")
X31 = my.mvrnorm(5e3, mu=c(2,0), Sigma=sig)
X32 = my.mvrnorm(5e3, mu=c(-1,0), Sigma=.3*sig2)
X3 = rbind(X31,X32)
X3.pq = ProjQuant(X3, c(0,.9), 1000)
X3.wpq = WtProjQuantProfile(X3, c(0,.9), 1000, 100, 0.5, 0.2, 0.9)
plot(X3, pch=19, cex=.1)
lines(X3.pq[,1], X2.pq[,2], lwd=2, col="blue")
lines(X3.wpq[,1], X2.wpq[,2], lwd=2, col="darkgreen")
X31 = my.mvrnorm(5e3, mu=c(2,0), Sigma=sig)
X32 = my.mvrnorm(2e3, mu=c(-1,0), Sigma=.3*sig2)
X3 = rbind(X31,X32)
X3.pq = ProjQuant(X3, c(0,.9), 1000)
X3.wpq = WtProjQuantProfile(X3, c(0,.9), 1000, 100, 0.5, 0.2, 0.9)
plot(X3, pch=19, cex=.1)
lines(X3.pq[,1], X2.pq[,2], lwd=2, col="blue")
lines(X3.wpq[,1], X2.wpq[,2], lwd=2, col="darkgreen")
X31 = my.mvrnorm(5e3, mu=c(2,0), Sigma=sig)
X32 = my.mvrnorm(2e3, mu=c(-1,0), Sigma=.3*sig2)
X3 = rbind(X31,X32)
X3.pq = ProjQuant(X3, c(0,.9), 1000)
X3.wpq = WtProjQuantProfile(X3, c(0,.9), 1000, 100, 0.5, 0.2, 0.1)
plot(X3, pch=19, cex=.1)
lines(X3.pq[,1], X2.pq[,2], lwd=2, col="blue")
lines(X3.wpq[,1], X2.wpq[,2], lwd=2, col="darkgreen")
X31 = my.mvrnorm(5e3, mu=c(2,0), Sigma=sig)
X32 = my.mvrnorm(2e3, mu=c(-1,0), Sigma=.3*sig2)
X3 = rbind(X31,X32)
X3.pq = ProjQuant(X3, c(0,.9), 1000)
X3.wpq = WtProjQuantProfile(X3, c(0,.9), 1000, 100, 0.5, 0.2, 2)
plot(X3, pch=19, cex=.1)
lines(X3.pq[,1], X2.pq[,2], lwd=2, col="blue")
lines(X3.wpq[,1], X2.wpq[,2], lwd=2, col="darkgreen")
X31 = my.mvrnorm(5e3, mu=c(2,0), Sigma=sig)
X32 = my.mvrnorm(2e3, mu=c(-1,0), Sigma=.3*sig2)
X3 = rbind(X31,X32)
X3.pq = ProjQuant(X3, c(0,.9), 1000)
X3.wpq = WtProjQuantProfile(X3, c(0,.9), 1000, 100, 0.5, 0.2, .6)
plot(X3, pch=19, cex=.1)
lines(X3.pq[,1], X2.pq[,2], lwd=2, col="blue")
lines(X3.wpq[,1], X2.wpq[,2], lwd=2, col="darkgreen")
X31 = my.mvrnorm(5e3, mu=c(2,0), Sigma=sig)
X32 = my.mvrnorm(2e3, mu=c(-1,0), Sigma=.3*sig2)
X3 = rbind(X31,X32)
X3.pq = ProjQuant(X3, c(0,.9), 1000)
X3.wpq = WtProjQuantProfile(X3, c(0,.9), 1000, 100, 0.5, 0.2, .9)
plot(X3, pch=19, cex=.1)
lines(X3.pq[,1], X2.pq[,2], lwd=2, col="blue")
lines(X3.wpq[,1], X2.wpq[,2], lwd=2, col="darkgreen")
X31 = my.mvrnorm(5e3, mu=c(2,0), Sigma=sig)
X32 = my.mvrnorm(2e3, mu=c(-1,0), Sigma=.3*sig2)
X3 = rbind(X31,X32)
X3.pq = ProjQuant(X3, c(0,.9), 1000)
X3.wpq = WtProjQuantProfile(X3, c(0,.9), 1000, 100, 0.5, 0.2, 1)
plot(X3, pch=19, cex=.1)
lines(X3.pq[,1], X2.pq[,2], lwd=2, col="blue")
lines(X3.wpq[,1], X2.wpq[,2], lwd=2, col="darkgreen")
X31 = my.mvrnorm(5e3, mu=c(2,0), Sigma=sig)
X32 = my.mvrnorm(2e3, mu=c(-1,0), Sigma=.3*sig2)
X3 = rbind(X31,X32)
X3.pq = ProjQuant(X3, c(0,.9), 1000)
X3.wpq = WtProjQuantProfile(X3, c(0,.9), 1000, 100, 0.5, 0.2, .95)
plot(X3, pch=19, cex=.1)
lines(X3.pq[,1], X2.pq[,2], lwd=2, col="blue")
lines(X3.wpq[,1], X2.wpq[,2], lwd=2, col="darkgreen")
X31 = my.mvrnorm(5e3, mu=c(2,0), Sigma=sig)
X32 = my.mvrnorm(2e3, mu=c(-1,0), Sigma=.3*sig2)
X3 = rbind(X31,X32)
X3.pq = ProjQuant(X3, c(0,.9), 1000)
X3.wpq = WtProjQuantProfile(X3, c(0,.9), 1000, 100, 0.5, 0.2, .9)
plot(X3, pch=19, cex=.1)
lines(X3.pq[,1], X2.pq[,2], lwd=2, col="blue")
lines(X3.wpq[,1], X2.wpq[,2], lwd=2, col="darkgreen")
X31 = my.mvrnorm(5e3, mu=c(2,0), Sigma=sig)
X32 = my.mvrnorm(2e3, mu=c(-1,0), Sigma=.3*sig2)
X3 = rbind(X31,X32)
X3.pq = ProjQuant(X3, c(0,.9), 1000)
X3.wpq = WtProjQuantProfile(X3, c(0,.9), 1000, 100, 0.5, 0.1, .9)
plot(X3, pch=19, cex=.1)
lines(X3.pq[,1], X2.pq[,2], lwd=2, col="blue")
lines(X3.wpq[,1], X2.wpq[,2], lwd=2, col="darkgreen")
X31 = my.mvrnorm(5e3, mu=c(2,0), Sigma=sig)
X32 = my.mvrnorm(2e3, mu=c(-1,0), Sigma=.3*sig2)
X3 = rbind(X31,X32)
X3.pq = ProjQuant(X3, c(0,.9), 1000)
X3.wpq = WtProjQuantProfile(X3, c(0,.9), 1000, 100, 0.5, 0.5, .9)
plot(X3, pch=19, cex=.1)
lines(X3.pq[,1], X2.pq[,2], lwd=2, col="blue")
lines(X3.wpq[,1], X2.wpq[,2], lwd=2, col="darkgreen")
X31 = my.mvrnorm(5e3, mu=c(2,0), Sigma=sig)
X32 = my.mvrnorm(2e3, mu=c(-1,0), Sigma=.3*sig2)
X3 = rbind(X31,X32)
X3.pq = ProjQuant(X3, c(0,.9), 1000)
X3.wpq = WtProjQuantProfile(X3, c(0,.9), 1000, 100, 0.5, 0.7, .9)
plot(X3, pch=19, cex=.1)
lines(X3.pq[,1], X2.pq[,2], lwd=2, col="blue")
lines(X3.wpq[,1], X2.wpq[,2], lwd=2, col="darkgreen")
X3.wpq = WtProjQuantProfile(X3, c(0,.9), 1000, 100, 0.5, 0.9, .9)
plot(X3, pch=19, cex=.1)
lines(X3.pq[,1], X2.pq[,2], lwd=2, col="blue")
lines(X3.wpq[,1], X2.wpq[,2], lwd=2, col="darkgreen")
X3.wpq = WtProjQuantProfile(X3, c(0,.9), 1000, 100, 0.5, 0.2, .9)
plot(X3, pch=19, cex=.1)
lines(X3.pq[,1], X2.pq[,2], lwd=2, col="blue")
lines(X3.wpq[,1], X2.wpq[,2], lwd=2, col="darkgreen")
X3.wpq = WtProjQuantProfile(X3, c(0,.9), 1000, 100, 0.5, 0.7, .9)
plot(X3, pch=19, cex=.1)
lines(X3.pq[,1], X2.pq[,2], lwd=2, col="blue")
lines(X3.wpq[,1], X2.wpq[,2], lwd=2, col="darkgreen")
X3.wpq = WtProjQuantProfile(X3, c(0,.9), 1000, 100, 0.5, 0.2, .9)
plot(X3, pch=19, cex=.1)
lines(X3.pq[,1], X2.pq[,2], lwd=2, col="blue")
lines(X3.wpq[,1], X2.wpq[,2], lwd=2, col="darkgreen")
X3.wpq = WtProjQuantProfile(X3, c(0,.9), 1000, 100, 0.5, 0.2, .2)
plot(X3, pch=19, cex=.1)
lines(X3.pq[,1], X2.pq[,2], lwd=2, col="blue")
lines(X3.wpq[,1], X2.wpq[,2], lwd=2, col="darkgreen")
X3.wpq = WtProjQuantProfile(X3, c(0,.9), 1000, 100, 0.2, 0.2, .9)
plot(X3, pch=19, cex=.1)
lines(X3.pq[,1], X2.pq[,2], lwd=2, col="blue")
lines(X3.wpq[,1], X2.wpq[,2], lwd=2, col="darkgreen")
X3.wpq = WtProjQuantProfile(X3, c(0,.9), 1000, 100, 0.5, 0.2, .9)
plot(X3, pch=19, cex=.1)
lines(X3.pq[,1], X2.pq[,2], lwd=2, col="blue")
lines(X3.wpq[,1], X2.wpq[,2], lwd=2, col="darkgreen")
X3.wpq = WtProjQuantProfile(X3, c(0,.9), 1000, 100, 0.9, 0.2, .9)
plot(X3, pch=19, cex=.1)
lines(X3.pq[,1], X2.pq[,2], lwd=2, col="blue")
lines(X3.wpq[,1], X2.wpq[,2], lwd=2, col="darkgreen")
X3.wpq = WtProjQuantProfile(X3, c(0,.9), 1000, 100, 0.01, 0.2, .9)
plot(X3, pch=19, cex=.1)
lines(X3.pq[,1], X2.pq[,2], lwd=2, col="blue")
lines(X3.wpq[,1], X2.wpq[,2], lwd=2, col="darkgreen")
X3.wpq = WtProjQuantProfile(X3, c(0,.9), 1000, 100, 0, 0.2, .9)
plot(X3, pch=19, cex=.1)
lines(X3.pq[,1], X2.pq[,2], lwd=2, col="blue")
lines(X3.wpq[,1], X2.wpq[,2], lwd=2, col="darkgreen")
X3.wpq = WtProjQuantProfile(X3, c(0,.9), 1000, 100, 0.5, 0.2, .9)
plot(X3, pch=19, cex=.1)
lines(X3.pq[,1], X2.pq[,2], lwd=2, col="blue")
lines(X3.wpq[,1], X2.wpq[,2], lwd=2, col="darkgreen")
n <- 1000
lambda1 <- 2
lambda2 <- 3
common <- 1
x1 <- rexp(n, rate=lambda1-common)
x2 <- rexp(n, rate=lambda2-common)
z <- rexp(n, rate=common)
y1 <- pmin(x1, z)
y2 <- pmin(x2, z)
plot(y1,y2)
plot(X1, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.3))
# normal confidence ellipsoid
require(ellipse); lines(ellipse(sig, level=.9), col="red", lwd=2, lty=2)
lines(X1.pq[,1], X1.pq[,2], lwd=2, col="blue")
lines(X1.wpq[,1], X1.wpq[,2], lwd=2, col="darkgreen")
plot(X2, pch=19, cex=.1)
lines(X2.pq[,1], X2.pq[,2], lwd=2, col="blue")
lines(X2.wpq[,1], X2.wpq[,2], lwd=2, col="darkgreen")
plot(X2, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.3))
lines(X2.pq[,1], X2.pq[,2], lwd=2, col="blue")
lines(X2.wpq[,1], X2.wpq[,2], lwd=2, col="darkgreen")
plot(X3, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.3))
lines(X3.pq[,1], X2.pq[,2], lwd=2, col="blue")
lines(X3.wpq[,1], X2.wpq[,2], lwd=2, col="darkgreen")
