rm(xcoord,ycoord)
# my PQD
sig=1
npt = dim(xygrid)[1]
Fuxu.mat = matrix(0, nrow=npt, ncol=1000)
for(iu in 1:1000){
u = rnorm(2); u = u/sqrt(sum(u^2))
Xu = X%*%u
Xuperp = sqrt(apply(X^2,1,sum) - Xu^2)
w = 2*dnorm(Xuperp, sd=sig)
#w = dcauchy(Xuperp, scale=sig)
uecdf = ecdf(w*Xu)
xygrid.u = xygrid%*%u
wu = 2*dnorm(sqrt(apply(xygrid^2,1,sum) - xygrid.u^2), sd=sig)
#wu = dcauchy(sqrt(apply(xygrid^2,1,sum) - xygrid.u^2), scale=sig)
Fuxu.mat[,iu] = uecdf(wu*xygrid.u)
}
EPQD.vec = 1/(1+apply(abs(Fuxu.mat-.5), 1, max))
par(mfrow=c(1,2))
persp(pts, pts, matrix(EPQD.vec, nrow=lengrid, byrow=T),
main="Projection Quantile Depth",
xlab="x1", ylab="x2", zlab="PQD(x,F)",
theta=-45, phi=45)
# contour plot
z = contour(pts, pts, matrix(EPQD.vec, nrow=lengrid, byrow=T),
lwd=2, col="red", nlevels=20)
points(X, pch=19, cex=.2)
par(mfrow=c(1,1))
pts = seq(-2,2,by=.11)
lengrid = length(pts)
xcoord = rep(pts, rep(lengrid,lengrid))
ycoord = rep(pts, lengrid)
xygrid = cbind(xcoord,ycoord)
rm(xcoord,ycoord)
# my PQD
sig=1
npt = dim(xygrid)[1]
Fuxu.mat = matrix(0, nrow=npt, ncol=1000)
for(iu in 1:1000){
u = rnorm(2); u = u/sqrt(sum(u^2))
Xu = X%*%u
Xuperp = sqrt(apply(X^2,1,sum) - Xu^2)
w = 2*dnorm(Xuperp, sd=sig)
#w = dcauchy(Xuperp, scale=sig)
uecdf = ecdf(w*Xu)
xygrid.u = xygrid%*%u
wu = 2*dnorm(sqrt(apply(xygrid^2,1,sum) - xygrid.u^2), sd=sig)
#wu = dcauchy(sqrt(apply(xygrid^2,1,sum) - xygrid.u^2), scale=sig)
Fuxu.mat[,iu] = uecdf(wu*xygrid.u)
}
EPQD.vec = 1/(1+apply(abs(Fuxu.mat-.5), 1, max))
par(mfrow=c(1,2))
persp(pts, pts, matrix(EPQD.vec, nrow=lengrid, byrow=T),
main="Projection Quantile Depth",
xlab="x1", ylab="x2", zlab="PQD(x,F)",
theta=-45, phi=45)
# contour plot
z = contour(pts, pts, matrix(EPQD.vec, nrow=lengrid, byrow=T),
lwd=2, col="red", nlevels=20)
points(X, pch=19, cex=.2)
par(mfrow=c(1,1))
X = X[which(normX<.9),]
X = X[which(normX<.9),]
normX = apply(X^2, 1, sum)
X = X[which(normX<.9),]
plot(X)
sig = matrix(c(1,.5,.5,1), nrow=2)
sig2 = matrix(c(1,-.5,-.5,1), nrow=2)
X1 = my.mvrnorm(500, mu=c(5,0), Sigma=sig)
X2 = my.mvrnorm(500, mu=c(-5,0), Sigma=sig2)
X = rbind(X1,X2)
# define grid of points
pts = seq(-2,2,by=.11)
lengrid = length(pts)
xcoord = rep(pts, rep(lengrid,lengrid))
ycoord = rep(pts, lengrid)
xygrid = cbind(xcoord,ycoord)
rm(xcoord,ycoord)
# my PQD
sig=1
npt = dim(xygrid)[1]
Fuxu.mat = matrix(0, nrow=npt, ncol=1000)
for(iu in 1:1000){
u = rnorm(2); u = u/sqrt(sum(u^2))
Xu = X%*%u
Xuperp = sqrt(apply(X^2,1,sum) - Xu^2)
w = 2*dnorm(Xuperp, sd=sig)
#w = dcauchy(Xuperp, scale=sig)
uecdf = ecdf(w*Xu)
xygrid.u = xygrid%*%u
wu = 2*dnorm(sqrt(apply(xygrid^2,1,sum) - xygrid.u^2), sd=sig)
#wu = dcauchy(sqrt(apply(xygrid^2,1,sum) - xygrid.u^2), scale=sig)
Fuxu.mat[,iu] = uecdf(wu*xygrid.u)
}
EPQD.vec = 1/(1+apply(abs(Fuxu.mat-.5), 1, max))
par(mfrow=c(1,2))
persp(pts, pts, matrix(EPQD.vec, nrow=lengrid, byrow=T),
main="Projection Quantile Depth",
xlab="x1", ylab="x2", zlab="PQD(x,F)",
theta=-45, phi=45)
# contour plot
z = contour(pts, pts, matrix(EPQD.vec, nrow=lengrid, byrow=T),
lwd=2, col="red", nlevels=20)
points(X, pch=19, cex=.2)
par(mfrow=c(1,1))
sig = matrix(c(1,.5,.5,1), nrow=2)
sig2 = matrix(c(1,-.5,-.5,1), nrow=2)
X1 = my.mvrnorm(500, mu=c(1,0), Sigma=sig)
X2 = my.mvrnorm(500, mu=c(-1,0), Sigma=sig2)
X = rbind(X1,X2)
# define grid of points
pts = seq(-2,2,by=.11)
lengrid = length(pts)
xcoord = rep(pts, rep(lengrid,lengrid))
ycoord = rep(pts, lengrid)
xygrid = cbind(xcoord,ycoord)
rm(xcoord,ycoord)
# my PQD
sig=1
npt = dim(xygrid)[1]
Fuxu.mat = matrix(0, nrow=npt, ncol=1000)
for(iu in 1:1000){
u = rnorm(2); u = u/sqrt(sum(u^2))
Xu = X%*%u
Xuperp = sqrt(apply(X^2,1,sum) - Xu^2)
w = 2*dnorm(Xuperp, sd=sig)
#w = dcauchy(Xuperp, scale=sig)
uecdf = ecdf(w*Xu)
xygrid.u = xygrid%*%u
wu = 2*dnorm(sqrt(apply(xygrid^2,1,sum) - xygrid.u^2), sd=sig)
#wu = dcauchy(sqrt(apply(xygrid^2,1,sum) - xygrid.u^2), scale=sig)
Fuxu.mat[,iu] = uecdf(wu*xygrid.u)
}
EPQD.vec = 1/(1+apply(abs(Fuxu.mat-.5), 1, max))
par(mfrow=c(1,2))
persp(pts, pts, matrix(EPQD.vec, nrow=lengrid, byrow=T),
main="Projection Quantile Depth",
xlab="x1", ylab="x2", zlab="PQD(x,F)",
theta=-45, phi=45)
# contour plot
z = contour(pts, pts, matrix(EPQD.vec, nrow=lengrid, byrow=T),
lwd=2, col="red", nlevels=20)
points(X, pch=19, cex=.2)
par(mfrow=c(1,1))
sig = matrix(c(1,.5,.5,1), nrow=2)
sig2 = matrix(c(1,-.5,-.5,1), nrow=2)
X1 = my.mvrnorm(500, mu=c(1,0), Sigma=sig)
X2 = my.mvrnorm(500, mu=c(-1,0), Sigma=sig2)
X = rbind(X1,X2)
# define grid of points
pts = seq(-5,5,by=.2)
lengrid = length(pts)
xcoord = rep(pts, rep(lengrid,lengrid))
ycoord = rep(pts, lengrid)
xygrid = cbind(xcoord,ycoord)
rm(xcoord,ycoord)
# my PQD
sig=1
npt = dim(xygrid)[1]
Fuxu.mat = matrix(0, nrow=npt, ncol=1000)
for(iu in 1:1000){
u = rnorm(2); u = u/sqrt(sum(u^2))
Xu = X%*%u
Xuperp = sqrt(apply(X^2,1,sum) - Xu^2)
w = 2*dnorm(Xuperp, sd=sig)
#w = dcauchy(Xuperp, scale=sig)
uecdf = ecdf(w*Xu)
xygrid.u = xygrid%*%u
wu = 2*dnorm(sqrt(apply(xygrid^2,1,sum) - xygrid.u^2), sd=sig)
#wu = dcauchy(sqrt(apply(xygrid^2,1,sum) - xygrid.u^2), scale=sig)
Fuxu.mat[,iu] = uecdf(wu*xygrid.u)
}
EPQD.vec = 1/(1+apply(abs(Fuxu.mat-.5), 1, max))
par(mfrow=c(1,2))
persp(pts, pts, matrix(EPQD.vec, nrow=lengrid, byrow=T),
main="Projection Quantile Depth",
xlab="x1", ylab="x2", zlab="PQD(x,F)",
theta=-45, phi=45)
# contour plot
z = contour(pts, pts, matrix(EPQD.vec, nrow=lengrid, byrow=T),
lwd=2, col="red", nlevels=20)
points(X, pch=19, cex=.2)
par(mfrow=c(1,1))
sig = matrix(c(1,.5,.5,1), nrow=2)
sig2 = matrix(c(1,-.5,-.5,1), nrow=2)
X1 = my.mvrnorm(500, mu=c(-1,0), Sigma=sig)
X2 = my.mvrnorm(500, mu=c(-3,0), Sigma=sig2)
X = rbind(X1,X2)
# define grid of points
pts = seq(-7,3,by=.2)
lengrid = length(pts)
xcoord = rep(pts, rep(lengrid,lengrid))
ycoord = rep(pts, lengrid)
xygrid = cbind(xcoord,ycoord)
rm(xcoord,ycoord)
# my PQD
sig=1
npt = dim(xygrid)[1]
Fuxu.mat = matrix(0, nrow=npt, ncol=1000)
for(iu in 1:1000){
u = rnorm(2); u = u/sqrt(sum(u^2))
Xu = X%*%u
Xuperp = sqrt(apply(X^2,1,sum) - Xu^2)
w = 2*dnorm(Xuperp, sd=sig)
#w = dcauchy(Xuperp, scale=sig)
uecdf = ecdf(w*Xu)
xygrid.u = xygrid%*%u
wu = 2*dnorm(sqrt(apply(xygrid^2,1,sum) - xygrid.u^2), sd=sig)
#wu = dcauchy(sqrt(apply(xygrid^2,1,sum) - xygrid.u^2), scale=sig)
Fuxu.mat[,iu] = uecdf(wu*xygrid.u)
}
EPQD.vec = 1/(1+apply(abs(Fuxu.mat-.5), 1, max))
par(mfrow=c(1,2))
persp(pts, pts, matrix(EPQD.vec, nrow=lengrid, byrow=T),
main="Projection Quantile Depth",
xlab="x1", ylab="x2", zlab="PQD(x,F)",
theta=-45, phi=45)
# contour plot
z = contour(pts, pts, matrix(EPQD.vec, nrow=lengrid, byrow=T),
lwd=2, col="red", nlevels=20)
points(X, pch=19, cex=.2)
par(mfrow=c(1,1))
sig = matrix(c(1,.5,.5,1), nrow=2)
sig2 = matrix(c(1,-.5,-.5,1), nrow=2)
X1 = my.mvrnorm(500, mu=c(-4,0), Sigma=sig)
X2 = my.mvrnorm(500, mu=c(-6,0), Sigma=sig2)
X = rbind(X1,X2)
# define grid of points
pts = seq(-10,-5,by=.2)
lengrid = length(pts)
xcoord = rep(pts, rep(lengrid,lengrid))
ycoord = rep(pts, lengrid)
xygrid = cbind(xcoord,ycoord)
rm(xcoord,ycoord)
# my PQD
sig=1
npt = dim(xygrid)[1]
Fuxu.mat = matrix(0, nrow=npt, ncol=1000)
for(iu in 1:1000){
u = rnorm(2); u = u/sqrt(sum(u^2))
Xu = X%*%u
Xuperp = sqrt(apply(X^2,1,sum) - Xu^2)
w = 2*dnorm(Xuperp, sd=sig)
#w = dcauchy(Xuperp, scale=sig)
uecdf = ecdf(w*Xu)
xygrid.u = xygrid%*%u
wu = 2*dnorm(sqrt(apply(xygrid^2,1,sum) - xygrid.u^2), sd=sig)
#wu = dcauchy(sqrt(apply(xygrid^2,1,sum) - xygrid.u^2), scale=sig)
Fuxu.mat[,iu] = uecdf(wu*xygrid.u)
}
EPQD.vec = 1/(1+apply(abs(Fuxu.mat-.5), 1, max))
par(mfrow=c(1,2))
persp(pts, pts, matrix(EPQD.vec, nrow=lengrid, byrow=T),
main="Projection Quantile Depth",
xlab="x1", ylab="x2", zlab="PQD(x,F)",
theta=-45, phi=45)
# contour plot
z = contour(pts, pts, matrix(EPQD.vec, nrow=lengrid, byrow=T),
lwd=2, col="red", nlevels=20)
points(X, pch=19, cex=.2)
par(mfrow=c(1,1))
pts
pts
sig = matrix(c(1,.5,.5,1), nrow=2)
sig2 = matrix(c(1,-.5,-.5,1), nrow=2)
X1 = my.mvrnorm(500, mu=c(-5,0), Sigma=sig)
X2 = my.mvrnorm(500, mu=c(-7,0), Sigma=sig2)
X = rbind(X1,X2)
# define grid of points
pts = seq(-11,-1,by=.2)
lengrid = length(pts)
xcoord = rep(pts, rep(lengrid,lengrid))
ycoord = rep(pts, lengrid)
xygrid = cbind(xcoord,ycoord)
rm(xcoord,ycoord)
# my PQD
sig=1
npt = dim(xygrid)[1]
Fuxu.mat = matrix(0, nrow=npt, ncol=1000)
for(iu in 1:1000){
u = rnorm(2); u = u/sqrt(sum(u^2))
Xu = X%*%u
Xuperp = sqrt(apply(X^2,1,sum) - Xu^2)
w = 2*dnorm(Xuperp, sd=sig)
#w = dcauchy(Xuperp, scale=sig)
uecdf = ecdf(w*Xu)
xygrid.u = xygrid%*%u
wu = 2*dnorm(sqrt(apply(xygrid^2,1,sum) - xygrid.u^2), sd=sig)
#wu = dcauchy(sqrt(apply(xygrid^2,1,sum) - xygrid.u^2), scale=sig)
Fuxu.mat[,iu] = uecdf(wu*xygrid.u)
}
EPQD.vec = 1/(1+apply(abs(Fuxu.mat-.5), 1, max))
par(mfrow=c(1,2))
persp(pts, pts, matrix(EPQD.vec, nrow=lengrid, byrow=T),
main="Projection Quantile Depth",
xlab="x1", ylab="x2", zlab="PQD(x,F)",
theta=-45, phi=45)
# contour plot
z = contour(pts, pts, matrix(EPQD.vec, nrow=lengrid, byrow=T),
lwd=2, col="red", nlevels=20)
points(X, pch=19, cex=.2)
par(mfrow=c(1,1))
sig = matrix(c(1,.5,.5,1), nrow=2)
sig2 = matrix(c(1,-.5,-.5,1), nrow=2)
X1 = my.mvrnorm(500, mu=c(-5,-6), Sigma=sig)
X2 = my.mvrnorm(500, mu=c(-7,-6), Sigma=sig2)
X = rbind(X1,X2)
# define grid of points
pts = seq(-11,-1,by=.2)
lengrid = length(pts)
xcoord = rep(pts, rep(lengrid,lengrid))
ycoord = rep(pts, lengrid)
xygrid = cbind(xcoord,ycoord)
rm(xcoord,ycoord)
# my PQD
sig=1
npt = dim(xygrid)[1]
Fuxu.mat = matrix(0, nrow=npt, ncol=1000)
for(iu in 1:1000){
u = rnorm(2); u = u/sqrt(sum(u^2))
Xu = X%*%u
Xuperp = sqrt(apply(X^2,1,sum) - Xu^2)
w = 2*dnorm(Xuperp, sd=sig)
#w = dcauchy(Xuperp, scale=sig)
uecdf = ecdf(w*Xu)
xygrid.u = xygrid%*%u
wu = 2*dnorm(sqrt(apply(xygrid^2,1,sum) - xygrid.u^2), sd=sig)
#wu = dcauchy(sqrt(apply(xygrid^2,1,sum) - xygrid.u^2), scale=sig)
Fuxu.mat[,iu] = uecdf(wu*xygrid.u)
}
EPQD.vec = 1/(1+apply(abs(Fuxu.mat-.5), 1, max))
par(mfrow=c(1,2))
persp(pts, pts, matrix(EPQD.vec, nrow=lengrid, byrow=T),
main="Projection Quantile Depth",
xlab="x1", ylab="x2", zlab="PQD(x,F)",
theta=-45, phi=45)
# contour plot
z = contour(pts, pts, matrix(EPQD.vec, nrow=lengrid, byrow=T),
lwd=2, col="red", nlevels=20)
points(X, pch=19, cex=.2)
par(mfrow=c(1,1))
sig = matrix(c(1,.5,.5,1), nrow=2)
sig2 = matrix(c(1,-.5,-.5,1), nrow=2)
X1 = my.mvrnorm(500, mu=c(-3,-6), Sigma=sig)
X2 = my.mvrnorm(500, mu=c(-9,-6), Sigma=sig2)
X = rbind(X1,X2)
# define grid of points
pts = seq(-11,-1,by=.2)
lengrid = length(pts)
xcoord = rep(pts, rep(lengrid,lengrid))
ycoord = rep(pts, lengrid)
xygrid = cbind(xcoord,ycoord)
rm(xcoord,ycoord)
# my PQD
sig=1
npt = dim(xygrid)[1]
Fuxu.mat = matrix(0, nrow=npt, ncol=1000)
for(iu in 1:1000){
u = rnorm(2); u = u/sqrt(sum(u^2))
Xu = X%*%u
Xuperp = sqrt(apply(X^2,1,sum) - Xu^2)
w = 2*dnorm(Xuperp, sd=sig)
#w = dcauchy(Xuperp, scale=sig)
uecdf = ecdf(w*Xu)
xygrid.u = xygrid%*%u
wu = 2*dnorm(sqrt(apply(xygrid^2,1,sum) - xygrid.u^2), sd=sig)
#wu = dcauchy(sqrt(apply(xygrid^2,1,sum) - xygrid.u^2), scale=sig)
Fuxu.mat[,iu] = uecdf(wu*xygrid.u)
}
EPQD.vec = 1/(1+apply(abs(Fuxu.mat-.5), 1, max))
par(mfrow=c(1,2))
persp(pts, pts, matrix(EPQD.vec, nrow=lengrid, byrow=T),
main="Projection Quantile Depth",
xlab="x1", ylab="x2", zlab="PQD(x,F)",
theta=-45, phi=45)
# contour plot
z = contour(pts, pts, matrix(EPQD.vec, nrow=lengrid, byrow=T),
lwd=2, col="red", nlevels=20)
points(X, pch=19, cex=.2)
par(mfrow=c(1,1))
sig = matrix(c(1,.5,.5,1), nrow=2)
sig2 = matrix(c(1,-.5,-.5,1), nrow=2)
X1 = my.mvrnorm(500, mu=c(-2,-6), Sigma=sig)
X2 = my.mvrnorm(500, mu=c(-10,-6), Sigma=sig2)
X = rbind(X1,X2)
# define grid of points
pts = seq(-11,-1,by=.2)
lengrid = length(pts)
xcoord = rep(pts, rep(lengrid,lengrid))
ycoord = rep(pts, lengrid)
xygrid = cbind(xcoord,ycoord)
rm(xcoord,ycoord)
# my PQD
sig=1
npt = dim(xygrid)[1]
Fuxu.mat = matrix(0, nrow=npt, ncol=1000)
for(iu in 1:1000){
u = rnorm(2); u = u/sqrt(sum(u^2))
Xu = X%*%u
Xuperp = sqrt(apply(X^2,1,sum) - Xu^2)
w = 2*dnorm(Xuperp, sd=sig)
#w = dcauchy(Xuperp, scale=sig)
uecdf = ecdf(w*Xu)
xygrid.u = xygrid%*%u
wu = 2*dnorm(sqrt(apply(xygrid^2,1,sum) - xygrid.u^2), sd=sig)
#wu = dcauchy(sqrt(apply(xygrid^2,1,sum) - xygrid.u^2), scale=sig)
Fuxu.mat[,iu] = uecdf(wu*xygrid.u)
}
EPQD.vec = 1/(1+apply(abs(Fuxu.mat-.5), 1, max))
par(mfrow=c(1,2))
persp(pts, pts, matrix(EPQD.vec, nrow=lengrid, byrow=T),
main="Projection Quantile Depth",
xlab="x1", ylab="x2", zlab="PQD(x,F)",
theta=-45, phi=45)
# contour plot
z = contour(pts, pts, matrix(EPQD.vec, nrow=lengrid, byrow=T),
lwd=2, col="red", nlevels=20)
points(X, pch=19, cex=.2)
par(mfrow=c(1,1))
sig=2
npt = dim(xygrid)[1]
Fuxu.mat = matrix(0, nrow=npt, ncol=1000)
for(iu in 1:1000){
u = rnorm(2); u = u/sqrt(sum(u^2))
Xu = X%*%u
Xuperp = sqrt(apply(X^2,1,sum) - Xu^2)
w = 2*dnorm(Xuperp, sd=sig)
#w = dcauchy(Xuperp, scale=sig)
uecdf = ecdf(w*Xu)
xygrid.u = xygrid%*%u
wu = 2*dnorm(sqrt(apply(xygrid^2,1,sum) - xygrid.u^2), sd=sig)
#wu = dcauchy(sqrt(apply(xygrid^2,1,sum) - xygrid.u^2), scale=sig)
Fuxu.mat[,iu] = uecdf(wu*xygrid.u)
}
EPQD.vec = 1/(1+apply(abs(Fuxu.mat-.5), 1, max))
par(mfrow=c(1,2))
persp(pts, pts, matrix(EPQD.vec, nrow=lengrid, byrow=T),
main="Projection Quantile Depth",
xlab="x1", ylab="x2", zlab="PQD(x,F)",
theta=-45, phi=45)
# contour plot
z = contour(pts, pts, matrix(EPQD.vec, nrow=lengrid, byrow=T),
lwd=2, col="red", nlevels=20)
points(X, pch=19, cex=.2)
par(mfrow=c(1,1))
sig=1
npt = dim(xygrid)[1]
Fuxu.mat = matrix(0, nrow=npt, ncol=1000)
for(iu in 1:1000){
u = rnorm(2); u = u/sqrt(sum(u^2))
Xu = X%*%u
Xuperp = sqrt(apply(X^2,1,sum) - Xu^2)
w = 2*dnorm(Xuperp, sd=sig)
#w = dcauchy(Xuperp, scale=sig)
uecdf = ecdf(w*Xu)
xygrid.u = xygrid%*%u
wu = 2*dnorm(sqrt(apply(xygrid^2,1,sum) - xygrid.u^2), sd=sig)
#wu = dcauchy(sqrt(apply(xygrid^2,1,sum) - xygrid.u^2), scale=sig)
Fuxu.mat[,iu] = uecdf(wu*xygrid.u)
}
EPQD.vec = 1/(1+apply(abs(Fuxu.mat-.5), 1, max))
par(mfrow=c(1,2))
persp(pts, pts, matrix(EPQD.vec, nrow=lengrid, byrow=T),
main="Projection Quantile Depth",
xlab="x1", ylab="x2", zlab="PQD(x,F)",
theta=-45, phi=45)
# contour plot
z = contour(pts, pts, matrix(EPQD.vec, nrow=lengrid, byrow=T),
lwd=2, col="red", nlevels=20)
points(X, pch=19, cex=.2)
par(mfrow=c(1,1))
EPQD.vec
max(EPQD.vec)
sig = matrix(c(1,.5,.5,1), nrow=2)
sig2 = matrix(c(1,-.5,-.5,1), nrow=2)
X1 = my.mvrnorm(50, mu=c(-2,-6), Sigma=sig)
X2 = my.mvrnorm(50, mu=c(-10,-6), Sigma=sig2)
X = rbind(X1,X2)
# define grid of points
pts = seq(-11,-1,by=.2)
lengrid = length(pts)
xcoord = rep(pts, rep(lengrid,lengrid))
ycoord = rep(pts, lengrid)
xygrid = cbind(xcoord,ycoord)
rm(xcoord,ycoord)
# my PQD
sig=1
npt = dim(xygrid)[1]
Fuxu.mat = matrix(0, nrow=npt, ncol=1000)
for(iu in 1:1000){
u = rnorm(2); u = u/sqrt(sum(u^2))
Xu = X%*%u
Xuperp = sqrt(apply(X^2,1,sum) - Xu^2)
w = 2*dnorm(Xuperp, sd=sig)
#w = dcauchy(Xuperp, scale=sig)
uecdf = ecdf(w*Xu)
xygrid.u = xygrid%*%u
wu = 2*dnorm(sqrt(apply(xygrid^2,1,sum) - xygrid.u^2), sd=sig)
#wu = dcauchy(sqrt(apply(xygrid^2,1,sum) - xygrid.u^2), scale=sig)
Fuxu.mat[,iu] = uecdf(wu*xygrid.u)
}
EPQD.vec = 1/(1+apply(abs(Fuxu.mat-.5), 1, max))
par(mfrow=c(1,2))
persp(pts, pts, matrix(EPQD.vec, nrow=lengrid, byrow=T),
main="Projection Quantile Depth",
xlab="x1", ylab="x2", zlab="PQD(x,F)",
theta=-45, phi=45)
# contour plot
z = contour(pts, pts, matrix(EPQD.vec, nrow=lengrid, byrow=T),
lwd=2, col="red", nlevels=20)
points(X, pch=19, cex=.2)
par(mfrow=c(1,1))
