isamp = sample(1:n, n, replace=T)
imod = update(m0, data=fuel2001[isamp,])
coef.mat[i,] = coef(imod)[1]
}
return(coef.mat)
}
bootcoefs(10)
bootcoefs = function(nsamp){
n = nrow(fuel2001)
coef.mat = matrix(0, nrow=nsamp, ncol=4)
for(i in 1:nsamp){
isamp = sample(1:n, n, replace=T)
imod = update(m0, data=fuel2001[isamp,])
coef.mat[i,] = coef(imod)[-1]
}
return(coef.mat)
}
bootcoefs(10)
beta.matrix = bootcoefs(1e3)
hist(beta.matrix)
names(fuel2001)
par(mfrow=c(2,2))
hist(beta.matrix)
par(mfrow=c(1,1))
?apply
beta.matrix = bootcoefs(1e3)
par(mfrow=c(2,2))
apply(beta.matrix, 2, hist)
par(mfrow=c(1,1))
?hist
beta.matrix = bootcoefs(1e4)
par(mfrow=c(2,2))
apply(beta.matrix, 2, hist)
par(mfrow=c(1,1))
confint(m0)
confint(m0)[-1,]
mean.vec = apply(beta.matrix, 2, mean)
mean.vec
head(beta.matrix)
cbind(mean.vec-1.96*sd.vec, mean.vec+1.96*sd.vec)
sd.vec = apply(beta.matrix, 2, sd)
cbind(mean.vec-1.96*sd.vec, mean.vec+1.96*sd.vec)
confint(m0)[-1,]
mean.vec
m0$coefficients
?quantile
qfun = function(x) quantile(x, c(.025,.975))
apply(beta.matrix, 2, qfun)
t(apply(beta.matrix, 2, qfun))
cbind(mean.vec-1.96*sd.vec, mean.vec+1.96*sd.vec)
confint(m0)[-1,]
set.seed(805104)
beta.matrix = bootcoefs(1e4)
par(mfrow=c(2,2))
apply(beta.matrix, 2, hist)
par(mfrow=c(1,1))
# compare with actual CI
# actual
confint(m0)[-1,]
# bootstrap approx
mean.vec = apply(beta.matrix, 2, mean)
sd.vec = apply(beta.matrix, 2, sd)
cbind(mean.vec-1.96*sd.vec, mean.vec+1.96*sd.vec)
# bootstrap actual
qfun = function(x) quantile(x, c(.025,.975))
t(apply(beta.matrix, 2, qfun))
plot(weight~Age, jevons)
headjevons
head(jevons)
plot(Weight~Age, jevons)
plot(Progeny ~ Parent, galtonpeas)
abline(m.weighted <- lm(Progeny ~ Parent,
data=galtonpeas, weights= 1/SD^2), lwd=2)
abline(m.unweighted <- lm(Progeny ~ Parent,
data=galtonpeas), lty=2, lwd=2)
legend("topleft", c("WLS", "OLS"), lty=1:2 , lwd=2,
cex=.8, inset=.02)
compareCoefs(m.weighted, m.unweighted)
jevons
plot(Weight~Age, jevons, weights=SD^2/n)
mod2 = lm(Weight~Age, data=jevons, weights=SD^2/n)
mod2
warnings
warnings()
mod2 = lm(Weight~Age, data=jevons, weights=SD^2/n)
summary(mod2)
names(mod2)
sqrt(diag(vcov(jevons)))
sqrt(diag(vcov(jevons[,1:2])))
sqrt(diag(vcov(asmatrix(jevons[,1:2]))))
sqrt(diag(vcov(as.matrix(jevons[,1:2]))))
summary(mod1)$coefficients[,2]
summary(mod2)$coefficients[,2]
z = summary(mod2)
(z = summary(mod2))
z$coef
(z$coef[,1]-7.9876)/z$coef[,2]
tstat = (z$coef[2,1]-7.9876)/z$coef[2,2]
2*(1-pt(abs(tstat), 4))
z$coef[,2]
z$coef[2,1]
z$coef[2,2]
tstat = (z$coef[1,1]-7.9876)/z$coef[1,2]
2*(1-pt(abs(tstat), 4))
mean.vec = mod2$coef[1]+(1:5)*mod2$coef[2]
mean.vec
jevons
?var
se.vec = sqrt(jevons$SD^2 + var(mod2$fitted.values))
se.vec
hevons$SD
jevons$SD
jevons
?pnorm
pnorm(7.9876, mean.vec, se.vec)
mean,vec
mean.vec
se.vec
jevons
pnorm(7.9379, mean=mean.vec, sd=se.vec)
(age.at.min = (7.9379-mod2$coef[1])/mod2$coef[2])
grad = c(-1/c1, -(7.9379-c0)/c1^2)
c0 = mod2$coef[1]
c1 = mod2$coef[2]
mean.vec = mod2$c0+(1:5)*c1
se.vec = sqrt(jevons$SD^2 + var(mod2$fitted.values))
pnorm(7.9379, mean=mean.vec, sd=se.vec)
c0
c1
mean.vec = mod2$c0+(1:5)*c1
mean.vec
mean.vec = c0+(1:5)*c1
mean.vec
se.vec = sqrt(jevons$SD^2 + var(mod2$fitted.values))
pnorm(7.9379, mean=mean.vec, sd=se.vec)
(age.at.min = (7.9379-c0)/c1)
grad = c(-1/c1, -(7.9379-c0)/c1^2)
grad
vcov(mod2)
se.age.at.min = sqrt(t(grad)%*%vcov(mod2)%*%grad)
(se.age.at.min = sqrt(t(grad)%*%vcov(mod2)%*%grad))
?deltaMethod
deltaMethod(mod2, "(7.9379-Intercept)/Age")
pnorm(7.9876, mean=mean.vec, sd=se.vec)
deltaMethod(mod2, "(7.9876-Intercept)/Age")
379
deltaMethod(mod2, "(7.9379-Intercept)/Age")
(se.age.at.min = sqrt(t(grad)%*%vcov(mod2)%*%grad))
deltaMethod
plot(Progeny ~ Parent, galtonpeas)
library(alr4)
plot(Progeny ~ Parent, galtonpeas)
m.weighted <- lm(Progeny ~ Parent,
data=galtonpeas, weights= 1/SD^2)
abline(m.weighted, lwd=2)
abline(m.unweighted <- lm(Progeny ~ Parent,
data=galtonpeas), lty=2, lwd=2)
legend("topleft", c("WLS", "OLS"), lty=1:2 , lwd=2,
cex=.8, inset=.02)
compareCoefs(m.weighted, m.unweighted)
jevons
plot(Weight~Age, jevons)
plot(SD~Age, jevons)
par(mfrow=c(2,1))
plot(Weight~Age, jevons)
plot(SD~Age, jevons)
par(mfrow=c(1,1))
par(mfrow=c(2,1))
plot(Weight~Age, jevons)
plot(SD~Age, jevons)
par(mfrow=c(1,1))
par(mfrow=c(2,1))
plot(Weight~Age, jevons)
plot(SD~Age, jevons)
par(mfrow=c(1,1))
plot(Weight~Age, jevons)
plot(SD~Age, jevons)
jevons
mod2 = lm(Weight~Age, data=jevons, weights=SD^2/n)
(z = summary(mod2))
z$coef
names(z)
mod2$coef
tstat = (z$coef[1,1]-7.9876)/z$coef[1,2]
tstat
2*(1-pt(abs(tstat), 4))
vcov(mod2)
with(jevons, vcov(cbind(Weight,Age)))
with(jevons, cbind(Weight,Age))
k = as.matrix(with(jevons, cbind(Weight,Age)))
k
vcov(k)
cov(k[,1],k[,2])
vcov(k[,1],k[,2])
var(k[,1])
var[k,2]
var(k[,2])
cov(k[,1],k[,2])
?vcov
grad = c(-1/c1, -(7.9379-c0)/c1^2)
c0 = mod2$coef[1]
c1 = mod2$coef[2]
mean.vec = c0+(1:5)*c1
se.vec = sqrt(jevons$SD^2 + var(mod2$fitted.values))
pnorm(7.9379, mean=mean.vec, sd=se.vec)
grad = c(-1/c1, -(7.9379-c0)/c1^2)
(se.age.at.min = sqrt(t(grad)%*%vcov(mod2)%*%grad))
deltaMethod(mod2, "(7.9379-Intercept)/Age")
(age.at.min = (7.9379-c0)/c1)
(se.age.at.min = sqrt(t(grad)%*%vcov(mod2)%*%grad))
summary(mod2)
data(fuel2001)
fuel2001$Dlic <- 1000*fuel2001$Drivers/fuel2001$Pop
fuel2001$Fuel <- 1000*fuel2001$FuelC/fuel2001$Pop
fuel2001$Income <- fuel2001$Income/1000
fuel2001$logMiles <- log(fuel2001$Miles,2)
m0 = lm(Fuel~Tax+Dlic+Income+logMiles, data=fuel2001)
bootcoefs = function(nsamp){
n = nrow(fuel2001)
coef.mat = matrix(0, nrow=nsamp, ncol=4)
for(i in 1:nsamp){
isamp = sample(1:n, n, replace=T)
imod = update(m0, data=fuel2001[isamp,])
coef.mat[i,] = coef(imod)[-1]
}
return(coef.mat)
}
set.seed(805104)
beta.matrix = bootcoefs(1e4)
head(beta.matrix)
par(mfrow=c(2,2))
apply(beta.matrix, 2, hist)
par(mfrow=c(1,1))
apply(beta.matrix, 2, hist)
confint(m0)[-1,]
head(beta.matrix)
mean.vec = apply(beta.matrix, 2, mean)
sd.vec = apply(beta.matrix, 2, sd)
cbind(mean.vec-1.96*sd.vec, mean.vec+1.96*sd.vec)
qfun = function(x) quantile(x, c(.025,.975))
t(apply(beta.matrix, 2, qfun))
library(alr4)
mod2 = lm(Weight~Age, data=jevons, weights=SD^2/n)
mod2 = lm(Weight~offset(Age), data=jevons, weights=SD^2/n)
summary(mod2)
head(highway)
library(alr4)
head(highway)
head(Highway)
mfull = lm(log(rate)~., Highway)
with(Highway, log(rate)~.)
?step
(mbk <- step(mfull, direction="backward"))
(mbk <- step(mfull, direction="backward"), trace=F)
(mbk <- step(mfull, direction="backward"), trace=0)
(mbk <- step(mfull, direction="backward", trace=0)
(mbk <- step(mfull, direction="backward", trace=F))
(mfw <- step(lm(log(rate)~1, Highway), scope=log(rate)~., direction="forward"))
(mfw <- step(lm(log(rate)~1, Highway),
scope=log(rate)~adt+trks+lane+acpt+sigs+itg+slim+len+lwid+shld+htype,
direction="forward"))
(mfw <- step(lm(log(rate)~1, Highway),
scope=log(rate)~adt+trks+lane+acpt+sigs+itg+slim+len+lwid+shld+htype,
direction="forward", trace=F))
(mbk <- step(mfull, direction="backward", trace=F))
mfull = lm(log(rate)~., Highway)
# backward selection
(mbk <- step(mfull, direction="backward", trace=F))
# forward selection
(mfw <- step(lm(log(rate)~1, Highway),
scope=log(rate)~adt+trks+lane+acpt+sigs+itg+slim+len+lwid+shld+htype,
direction="forward", trace=F))
f = log(rate)~log(adt)+log(trks)+lane+acpt+log(sigs)+itg+slim+log(len)+lwid+shld+htype
mfull = lm(f, Highway)
Highway$sigs1 = with(Highway, (sig*len+1)/len)
Highway$sigs1 = with(Highway, (sigs*len+1)/len)
f = log(rate)~log(adt)+log(trks)+lane+acpt+log(sigs1)+itg+slim+log(len)+lwid+shld+htype
mfull = lm(f, Highway)
(mbk <- step(mfull, direction="backward", trace=F))
(mbk <- step(mfull, scope=~log(len), direction="backward", trace=F))
(mbk <- step(mfull, scope=.~log(len), direction="backward", trace=F))
(mbk <- step(mfull, scope=c(lower=.~log(len)),
direction="backward", trace=F)
(mbk <- step(mfull, scope=c(lower=.~log(len)),
direction="backward", trace=F))
(mfw <- step(lm(log(rate)~log(len), Highway),
scope=f, direction="forward", trace=F))
f = log(rate)~log(adt)+log(trks)+lane+acpt+log(sigs1)+itg+slim+log(len)+lwid+shld+htype
mfull = lm(f, Highway)
# backward selection
(mbk <- step(mfull, scope=c(lower=.~log(len)),
direction="backward", trace=F))
# forward selection
(mfw <- step(lm(log(rate)~log(len), Highway),
scope=f, direction="forward", trace=F))
names(mbk)
mbk$model
names(mbk)
mbk$call
mbk$call
mfw$call
f = log(rate)~log(adt)+log(trks)+lane+acpt+log(sigs1)+itg+slim+log(len)+lwid+shld+htype
mfull = lm(f, Highway)
# backward selection
mbk <- step(mfull, scope=c(lower=.~log(len)),
direction="backward", trace=F)
mbk$call
# forward selection
mfw <- step(lm(log(rate)~log(len), Highway),
scope=f, direction="forward", trace=F)
mfw$call
f = log(rate)~log(adt)+log(trks)+lane+acpt+log(sigs1)
+itg+slim+log(len)+lwid+shld+htype
mfull = lm(f, Highway)
# backward selection
mbk <- step(mfull, scope=c(lower=.~log(len)),
direction="backward", trace=F)
mbk$call
# forward selection
mfw <- step(lm(log(rate)~log(len), Highway),
scope=f, direction="forward", trace=F)
mfw$call
f = log(rate)~log(adt)+log(trks)+lane+acpt+log(sigs1)+itg+slim+log(len)+lwid+shld+htype
mfull = lm(f, Highway)
# backward selection
mbk <- step(mfull, scope=c(lower=.~log(len)),
direction="backward", trace=F)
mbk$call
# forward selection
mfw <- step(lm(log(rate)~log(len), Highway),
scope=f, direction="forward", trace=F)
mfw$call
f1 = log(rate*len)~log(adt)+log(trks)+lane+acpt+log(sigs1)+itg+slim+lwid+shld+htype
mfull2 = lm(f1, Highway)
m2fw <- step(lm(log(rate*len)~lwid, Highway), scope=f1, direction="forward")
f1 = log(rate*len)~log(adt)+log(trks)+lane+acpt+log(sigs1)+itg+slim+lwid+shld+htype
m2fw <- step(lm(log(rate*len)~lwid, Highway), scope=f1, direction="forward")
m2be <- step(lm(f1, Highway),
scope=c(lower=.~lwid), direction="backward")
m2be <- step(lm(f1, Highway), scope=c(lower=.~lwid), direction="backward")
data(fuel2001)
fuel2001$Dlic <- 1000*fuel2001$Drivers/fuel2001$Pop
fuel2001$Fuel <- 1000*fuel2001$FuelC/fuel2001$Pop
fuel2001$Income <- fuel2001$Income/1000
fuel2001$logMiles <- log(fuel2001$Miles,2)
m0 = lm(Fuel~Tax+Dlic+Income+logMiles, data=fuel2001)
library(alr4)
data(fuel2001)
fuel2001$Dlic <- 1000*fuel2001$Drivers/fuel2001$Pop
fuel2001$Fuel <- 1000*fuel2001$FuelC/fuel2001$Pop
fuel2001$Income <- fuel2001$Income/1000
fuel2001$logMiles <- log(fuel2001$Miles,2)
m0 = lm(Fuel~Tax+Dlic+Income+logMiles, data=fuel2001)
summary(m0)
nrow(fuel2001)
anova(m0)
pts = seq(-1,1,by=.1)
lengrid = length(pts)
xcoord = rep(pts, rep(lengrid,lengrid))
ycoord = rep(pts, lengrid)
xygrid = cbind(xcoord,ycoord)
rm(xcoord,ycoord)
# Bivariate standard normal
# projection depth
cN = qnorm(.75)
xygrid = cbind(xygrid,
cN/(cN+sqrt(xygrid[,1]^2+xygrid[,2]^2)))
par(mfrow=c(1,2))
persp(pts, pts, matrix(xygrid[,3], nrow=lengrid, byrow=T),
main="Projection Depth",
xlab="x1", ylab="x2", zlab="PD(x,F)",
theta=-45, phi=45)
# projection quantile depth
# finding exact max
theta.opt = atan(xygrid[,2]/xygrid[,1])
theta.opt[which(is.na(theta.opt))] = pi/2 # takes care of x = (0,0)
u.opt = cbind(cos(theta.opt), sin(theta.opt))
len = nrow(xygrid)
pqd.vec = rep(0, len)
for(i in 1:len){
ix = xygrid[i,1:2]
iu = u.opt[i,]
Oix = abs(pnorm(sum(ix*iu))-0.5)
pqd.vec[i] = 1/(1+Oix)
}
persp(pts, pts, matrix(pqd.vec, nrow=lengrid, byrow=T),
main="Projection Quantile Depth",
xlab="x1", ylab="x2", zlab="PQD(x,F)",
theta=-45, phi=45)
par(mfrow=c(1,1))
head(pqd.vec1)
head(pqd.vec)
pqd.vec2 = 2/(2+sqrt(xygrid[,1]^2+xygrid[,2]^2))
head(pqd.vec2)
pqd.vec2 = 2/(2+pnorm(sqrt(xygrid[,1]^2+xygrid[,2]^2)))
head(pqd.vec2)
pqd.vec2 = 2/(1+2*pnorm(sqrt(xygrid[,1]^2+xygrid[,2]^2)))
pqd.vec2 = 2/(1+2*pnorm(sqrt(xygrid[,1]^2+xygrid[,2]^2)))
head(pqd.vec2)
pts = seq(-1,1,by=.1)
lengrid = length(pts)
xcoord = rep(pts, rep(lengrid,lengrid))
ycoord = rep(pts, lengrid)
xygrid = cbind(xcoord,ycoord)
rm(xcoord,ycoord)
# Bivariate standard normal
# projection depth
cN = qnorm(.75)
pd.vec = cN/(cN+sqrt(xygrid[,1]^2+xygrid[,2]^2))
# projection quantile depth
pqd.vec = 2/(1+2*pnorm(sqrt(xygrid[,1]^2+xygrid[,2]^2)))
par(mfrow=c(1,2))
persp(pts, pts, matrix(pd.vec, nrow=lengrid, byrow=T),
main="Projection Depth",
xlab="x1", ylab="x2", zlab="PD(x,F)",
theta=-45, phi=45)
persp(pts, pts, matrix(pqd.vec, nrow=lengrid, byrow=T),
main="Projection Quantile Depth",
xlab="x1", ylab="x2", zlab="PQD(x,F)",
theta=-45, phi=45)
par(mfrow=c(1,1))
plot(xygrid[,3], pqd.vec, type="l", lwd=2,
main="Comparison of PD and PQD", xlab="PD", ylab="PQD")
plot(pd.vec, pqd.vec, type="l", lwd=2,
main="Comparison of PD and PQD", xlab="PD", ylab="PQD")
norm.vec = sqrt(xygrid[,1]^2+xygrid[,2]^2)
cN = qnorm(.75)
pd.vec = cN/(cN+norm.vec)
# projection quantile depth
pqd.vec = 2/(1+2*pnorm(norm.vec))
par(mfrow=c(1,2))
persp(pts, pts, matrix(pd.vec, nrow=lengrid, byrow=T),
main="Projection Depth",
xlab="x1", ylab="x2", zlab="PD(x,F)",
theta=-45, phi=45)
persp(pts, pts, matrix(pqd.vec, nrow=lengrid, byrow=T),
main="Projection Quantile Depth",
xlab="x1", ylab="x2", zlab="PQD(x,F)",
theta=-45, phi=45)
par(mfrow=c(1,1))
# comparing PD and PQD
plot(pd.vec, pqd.vec, type="l", lwd=2,
main="Comparison of PD and PQD", xlab="PD", ylab="PQD")
par(mfrow=c(1,2))
persp(pts, pts, matrix(pd.vec, nrow=lengrid, byrow=T),
main="Projection Depth",
xlab="x1", ylab="x2", zlab="PD(x,F)",
theta=-45, phi=45)
persp(pts, pts, matrix(pqd.vec, nrow=lengrid, byrow=T),
main="Projection Quantile Depth",
xlab="x1", ylab="x2", zlab="PQD(x,F)",
theta=-45, phi=45)
par(mfrow=c(1,1))
rm(list=ls())
set.seed(10092014)
setwd("C:/Study/My projects/Quantiles/Codes/SBM")
library(inline)
library(Rcpp)
library(RcppArmadillo)
library(RcppEigen)
library(ellipse)
## cpp source file
sourceCpp("ProjQuantile.cpp", verbose=TRUE, rebuild=FALSE);
## function to generate from multivariate normal
my.mvrnorm = function(n, mu, Sigma){
p = length(mu)
# compute square root of covariance matrix
eo=eigen(Sigma, symmetric=TRUE)
sigma.sqrt=eo$vec%*%diag(eo$val^0.5)%*%t(eo$vec)
# generate random normals from runif by box-muller transform
rnorm.vec = sqrt(-2*log(runif(n*p)))*cos(2*pi*runif(n*p))
# generate sample matrix
sample.matrix = matrix(rep(mu, n), nrow=n, byrow=T) +
matrix(rnorm.vec, nrow=n, ncol=p)%*%sigma.sqrt
return(sample.matrix)
}
## function for PQ and WPQ plots for given data
PwPplot = function(dat, isEllipse=F, sig=NULL, t1, t2){
par(mfrow=c(1,2))
plot(dat, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.1),
main=t1, xlab="", ylab="")
for(i in 5:9){
iq = c(0,i/10)
dat.pq = ProjQuant(dat, iq, 1000)
lines(dat.pq[,1], dat.pq[,2], lty=2, col="red")
}
# WPQ
plot(dat, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.1),
main=t2, xlab="", ylab="")
for(i in 5:9){
iq = c(0,i/10)
dat.wpq = WtProjQuantProfile(dat, iq, 1000, 100, 0.5, 0.1, 0.9)
if(isEllipse)
lines(ellipse(sig, level=i/10), col="blue")
lines(dat.wpq[,1], dat.wpq[,2], lty=2, col="red")
}
par(mfrow=c(1,1))
}
n = 1e4
sig = matrix(c(1,.5,.5,1), nrow=2)
sig2 = matrix(c(1,-.5,-.5,1), nrow=2)
X41 = my.mvrnorm(5e3, mu=c(2,0), Sigma=sig)
X42 = my.mvrnorm(2e3, mu=c(-1,0), Sigma=.5*sig2)
X4 = rbind(X41,X42)
X4.pq = ProjQuant(X4, c(0,.9), 1000)
X4.wpq = WtProjQuantProfile(X4, c(0,.9), 1000, 100, 0.5, 0.1, 0.9)
plot(X4, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.3),
main="Bivariate Normal mixture", xlab="X1", ylab="X2")
# PQ contours
lines(ellipse(cov(X4), centre=colMeans(X4), level=.9), lwd=2)
lines(X4.pq[,1], X4.pq[,2], lwd=2, col="blue")
lines(X4.wpq[,1], X4.wpq[,2], lwd=2, col="red")
