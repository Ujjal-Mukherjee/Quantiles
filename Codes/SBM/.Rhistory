lines(X2.wpq[,1], X2.wpq[,2], lwd=2, col="darkgreen")
}
plot(X2, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.3))
for(i in 5:9){
iq = c(0,i/10)
X2.pq = ProjQuant(X2, iq, 1000)
lines(X2.pq[,1], X2.pq[,2], lwd=2, lty=2, col="red")
}
plot(X2, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.3))
for(i in 5:9){
iq = c(0,i/10)
X2.wpq = WtProjQuantProfile(X2, iq, 1000, 100, 0.5, 0.2, 0.9)
lines(X2.wpq[,1], X2.wpq[,2], lwd=2, lty=2, col="red")
}
sig2 = matrix(c(1,-.5,-.5,1), nrow=2)
X21 = my.mvrnorm(5e3, mu=c(1,0), Sigma=sig)
X22 = my.mvrnorm(5e3, mu=c(-1,0), Sigma=sig2)
X2 = rbind(X21,X22)
# PQ
plot(X2, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.3))
for(i in 5:9){
iq = c(0,i/10)
X2.pq = ProjQuant(X2, iq, 1000)
lines(X2.pq[,1], X2.pq[,2], lwd=2, lty=2, col="red")
}
plot(X2, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.3))
for(i in 5:9){
iq = c(0,i/10)
X2.wpq = WtProjQuantProfile(X2, iq, 1000, 100, 0.5, 0.2, 0.9)
lines(X2.wpq[,1], X2.wpq[,2], lwd=2, lty=2, col="red")
}
X31 = my.mvrnorm(5e3, mu=c(1,0), Sigma=sig)
X32 = my.mvrnorm(2e3, mu=c(-1,0), Sigma=.3*sig2)
X3 = rbind(X31,X32)
# PQ
plot(X3, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.3))
for(i in 5:9){
iq = c(0,i/10)
X3.pq = ProjQuant(X3, iq, 1000)
lines(X3.pq[,1], X3.pq[,3], lwd=3, lty=3, col="red")
}
for(i in 5:9){
iq = c(0,i/10)
X3.pq = ProjQuant(X3, iq, 1000)
lines(X3.pq[,1], X3.pq[,2], lwd=3, lty=3, col="red")
}
plot(X3, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.3))
for(i in 5:9){
iq = c(0,i/10)
X3.wpq = WtProjQuantProfile(X3, iq, 1000, 100, 0.5, 0.3, 0.9)
lines(X3.wpq[,1], X3.wpq[,2], lwd=3, lty=3, col="red")
}
sig = matrix(c(1,.5,.5,1), nrow=2)
X1 = my.mvrnorm(n, mu=c(0,0), Sigma=sig)
X1.pq = ProjQuant(X1, c(0,.9), 1000)
X1.wpq = WtProjQuantProfile(X1, c(0,.9), 1000, 100, 0.5, 0.2, .1)
# PQ
plot(X1, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.1))
for(i in 5:9){
iq = c(0,i/10)
X1.pq = ProjQuant(X1, iq, 1000)
lines(X1.pq[,1], X1.pq[,2], lwd=1, lty=1, col="red")
}
plot(X1, pch=19, cex=.1)
for(i in 5:9){
iq = c(0,i/10)
X1.pq = ProjQuant(X1, iq, 1000)
lines(X1.pq[,1], X1.pq[,2], lwd=1, lty=2, col="red")
}
plot(X1, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.1))
for(i in 5:9){
iq = c(0,i/10)
X1.pq = ProjQuant(X1, iq, 1000)
lines(X1.pq[,1], X1.pq[,2], lwd=2, lty=2, col="red")
}
plot(X1, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.3))
for(i in 5:9){
iq = c(0,i/10)
X1.pq = ProjQuant(X1, iq, 1000)
lines(X1.pq[,1], X1.pq[,2], lwd=2, lty=2, col="red")
}
plot(X1, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.1))
for(i in 5:9){
iq = c(0,i/10)
X1.pq = ProjQuant(X1, iq, 1000)
lines(X1.pq[,1], X1.pq[,2], lwd=2, lty=2, col="red")
}
plot(X1, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.1))
for(i in 5:9){
iq = c(0,i/10)
X1.pq = ProjQuant(X1, iq, 1000)
lines(X1.pq[,1], X1.pq[,2], lwd=1, lty=2, col="red")
}
## bivariate exponential
require(VineCopula)
X1 = rexp(1e4)
X2 = rexp(1e4)
c12 = BiCopSim(1e4, 1, par=.5)
X4 = cbind(X1,X2)*c12
head(X4)
plot(X4)
PwPplot(data, isEllipse=F, sig=NULL){
plot(data, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.1))
for(i in 5:9){
iq = c(0,i/10)
data.pq = ProjQuant(data, iq, 1000)
lines(data.pq[,1], data.pq[,2], lwd=1, lty=2, col="red")
}
# WPQ
plot(data, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.1))
for(i in 5:9){
iq = c(0,i/10)
data.wpq = WtProjQuantProfile(data, iq, 1000, 100, 0.5, 0.1, 0.9)
if(isEllipse)
require(ellipse); lines(ellipse, sig, level=iq, col="blue")
lines(data.wpq[,1], data.wpq[,2], lty=1, col="red")
}
}
library(ellipse)
PwPplot(data, isEllipse=F, sig=NULL){
plot(data, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.1))
for(i in 5:9){
iq = c(0,i/10)
data.pq = ProjQuant(data, iq, 1000)
lines(data.pq[,1], data.pq[,2], lwd=1, lty=2, col="red")
}
# WPQ
plot(data, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.1))
for(i in 5:9){
iq = c(0,i/10)
data.wpq = WtProjQuantProfile(data, iq, 1000, 100, 0.5, 0.1, 0.9)
if(isEllipse)
lines(ellipse, sig, level=iq, col="blue")
lines(data.wpq[,1], data.wpq[,2], lty=1, col="red")
}
}
PwPplot(data, isEllipse=F, sig=NULL){
plot(data, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.1))
for(i in 5:9){
iq = c(0,i/10)
data.pq = ProjQuant(data, iq, 1000)
lines(data.pq[,1], data.pq[,2], lwd=1, lty=2, col="red")
}
# WPQ
plot(data, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.1))
}
PwPplot(dat, isEllipse=F, sig=NULL){
plot(dat, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.1))
for(i in 5:9){
iq = c(0,i/10)
dat.pq = ProjQuant(dat, iq, 1000)
lines(dat.pq[,1], dat.pq[,2], lwd=1, lty=2, col="red")
}
# WPQ
plot(dat, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.1))
for(i in 5:9){
iq = c(0,i/10)
dat.wpq = WtProjQuantProfile(dat, iq, 1000, 100, 0.5, 0.1, 0.9)
if(isEllipse)
lines(ellipse, sig, level=iq, col="blue")
lines(dat.wpq[,1], dat.wpq[,2], lty=1, col="red")
}
}
PwPplot = function(dat, isEllipse=F, sig=NULL){
plot(dat, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.1))
for(i in 5:9){
iq = c(0,i/10)
dat.pq = ProjQuant(dat, iq, 1000)
lines(dat.pq[,1], dat.pq[,2], lwd=1, lty=2, col="red")
}
# WPQ
plot(dat, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.1))
for(i in 5:9){
iq = c(0,i/10)
dat.wpq = WtProjQuantProfile(dat, iq, 1000, 100, 0.5, 0.1, 0.9)
if(isEllipse)
lines(ellipse, sig, level=iq, col="blue")
lines(dat.wpq[,1], dat.wpq[,2], lty=1, col="red")
}
}
PwPplot(X1)
sig = matrix(c(1,.5,.5,1), nrow=2)
X1 = my.mvrnorm(n, mu=c(0,0), Sigma=sig)
PwPplot(X1)
PwPplot = function(dat, isEllipse=F, sig=NULL){
plot(dat, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.1))
for(i in 5:9){
iq = c(0,i/10)
dat.pq = ProjQuant(dat, iq, 1000)
lines(dat.pq[,1], dat.pq[,2], lty=2, col="red")
}
# WPQ
plot(dat, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.1))
for(i in 5:9){
iq = c(0,i/10)
dat.wpq = WtProjQuantProfile(dat, iq, 1000, 100, 0.5, 0.1, 0.9)
if(isEllipse)
lines(ellipse, sig, level=iq, col="blue")
lines(dat.wpq[,1], dat.wpq[,2], lty=2, col="red")
}
}
require(VineCopula)
X1 = rexp(1e4)
X2 = rexp(1e4)
c12 = BiCopSim(1e4, 1, par=.5)
X4 = cbind(X1,X2)*c12
PwPplot(X4)
PwPplot(X1, isEllipse = T, sig=sig)
PwPplot(X1, isEllipse = T, sig=sig)
X1 = my.mvrnorm(n, mu=c(0,0), Sigma=sig)
PwPplot(X1, isEllipse = T, sig=sig)
?ellipse
PwPplot = function(dat, isEllipse=F, sig=NULL){
plot(dat, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.1))
for(i in 5:9){
iq = c(0,i/10)
dat.pq = ProjQuant(dat, iq, 1000)
lines(dat.pq[,1], dat.pq[,2], lty=2, col="red")
}
# WPQ
plot(dat, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.1))
for(i in 5:9){
iq = c(0,i/10)
dat.wpq = WtProjQuantProfile(dat, iq, 1000, 100, 0.5, 0.1, 0.9)
if(isEllipse)
lines(ellipse(sig, level=iq), col="blue")
lines(dat.wpq[,1], dat.wpq[,2], lty=2, col="red")
}
}
PwPplot(X1, isEllipse = T, sig=sig)
plot(ellipse(sig))
plot(ellipse(sig, level=.5))
lines(ellipse(sig, level=.4))
par(mfrow=c(4,2))
PwPplot(X1, isEllipse = T, sig=sig)
PwPplot(X2)
PwPplot(X3)
PwPplot(X4)
par(mfrow=c(1,1))
sig = matrix(c(1,.5,.5,1), nrow=2)
X1 = my.mvrnorm(n, mu=c(0,0), Sigma=sig)
## Mixture normal simulation
sig2 = matrix(c(1,-.5,-.5,1), nrow=2)
X21 = my.mvrnorm(5e2, mu=c(1,0), Sigma=sig)
X22 = my.mvrnorm(5e2, mu=c(-1,0), Sigma=sig2)
X2 = rbind(X21,X22)
## Mixture normal, assymmetric
X31 = my.mvrnorm(5e2, mu=c(1,0), Sigma=sig)
X32 = my.mvrnorm(2e2, mu=c(-1,0), Sigma=.3*sig2)
X3 = rbind(X31,X32)
## bivariate exponential
require(VineCopula)
X1 = rexp(n)
X2 = rexp(n)
c12 = BiCopSim(n, 1, par=.5)
X4 = cbind(X1,X2)*c12
par(mfrow=c(4,2))
PwPplot(X1, isEllipse = T, sig=sig)
PwPplot(X2)
PwPplot(X3)
PwPplot(X4)
par(mfrow=c(1,1))
par(mfrow=c(4,2))
PwPplot(X1, isEllipse = T, sig=sig)
PwPplot(X2)
PwPplot(X3)
PwPplot(X4)
par(mfrow=c(1,1))
PwPplot = function(dat, isEllipse=F, sig=NULL){
par(mfrow=c(1,2))
plot(dat, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.1))
for(i in 5:9){
iq = c(0,i/10)
dat.pq = ProjQuant(dat, iq, 1000)
lines(dat.pq[,1], dat.pq[,2], lty=2, col="red")
}
# WPQ
plot(dat, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.1))
for(i in 5:9){
iq = c(0,i/10)
dat.wpq = WtProjQuantProfile(dat, iq, 1000, 100, 0.5, 0.1, 0.9)
if(isEllipse)
lines(ellipse(sig, level=iq), col="blue")
lines(dat.wpq[,1], dat.wpq[,2], lty=2, col="red")
}
par(mfrow=c(1,1))
}
PwPplot(X1, isEllipse = T, sig=sig)
X1 = my.mvrnorm(n, mu=c(0,0), Sigma=sig)
PwPplot(X1, isEllipse = T, sig=sig)
n = 1e4
## Simulating from Bivariate normal, mean (0,0), Sigma = ((1 .5), (.5 1))
sig = matrix(c(1,.5,.5,1), nrow=2)
X1 = my.mvrnorm(n, mu=c(0,0), Sigma=sig)
sig2 = matrix(c(1,-.5,-.5,1), nrow=2)
X21 = my.mvrnorm(5e3, mu=c(1,0), Sigma=sig)
X22 = my.mvrnorm(5e3, mu=c(-1,0), Sigma=sig2)
X2 = rbind(X21,X22)
## Mixture normal, assymmetric
X31 = my.mvrnorm(5e3, mu=c(1,0), Sigma=sig)
X32 = my.mvrnorm(2e3, mu=c(-1,0), Sigma=.3*sig2)
X3 = rbind(X31,X32)
PwPplot(X2)
PwPplot(X3)
PwPplot = function(dat, isEllipse=F, sig=NULL, t1, t2){
par(mfrow=c(1,2))
plot(dat, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.1)
main=t1, xlab="", ylab="")
for(i in 5:9){
iq = c(0,i/10)
dat.pq = ProjQuant(dat, iq, 1000)
lines(dat.pq[,1], dat.pq[,2], lty=2, col="red")
}
# WPQ
plot(dat, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.1)
main=t1, xlab="", ylab="")
for(i in 5:9){
iq = c(0,i/10)
dat.wpq = WtProjQuantProfile(dat, iq, 1000, 100, 0.5, 0.1, 0.9)
if(isEllipse)
lines(ellipse(sig, level=iq), col="blue")
lines(dat.wpq[,1], dat.wpq[,2], lty=2, col="red")
}
par(mfrow=c(1,1))
}
PwPplot = function(dat, isEllipse=F, sig=NULL, t1, t2){
par(mfrow=c(1,2))
plot(dat, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.1),
main=t1, xlab="", ylab="")
for(i in 5:9){
iq = c(0,i/10)
dat.pq = ProjQuant(dat, iq, 1000)
lines(dat.pq[,1], dat.pq[,2], lty=2, col="red")
}
# WPQ
plot(dat, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.1),
main=t1, xlab="", ylab="")
for(i in 5:9){
iq = c(0,i/10)
dat.wpq = WtProjQuantProfile(dat, iq, 1000, 100, 0.5, 0.1, 0.9)
if(isEllipse)
lines(ellipse(sig, level=iq), col="blue")
lines(dat.wpq[,1], dat.wpq[,2], lty=2, col="red")
}
par(mfrow=c(1,1))
}
PwPplot(X2)
PwPplot(X2, "a.","b.")
PwPplot(X2, t1="a.",t2="b.")
PwPplot(X3, t1="a.",t2="b.")
PwPplot(X4, t1="a.",t2="b.")
PwPplot(X2, t1="c.",t2="d.")
PwPplot(X3, t1="e.",t2="f.")
PwPplot(X4, t1="g.",t2="h.")
PwPplot = function(dat, isEllipse=F, sig=NULL, t1, t2){
par(mfrow=c(1,2))
plot(dat, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.1),
main=t1, xlab="", ylab="")
for(i in 5:9){
iq = c(0,i/10)
dat.pq = ProjQuant(dat, iq, 1000)
lines(dat.pq[,1], dat.pq[,2], lty=2, col="red")
}
# WPQ
plot(dat, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.1),
main=t2, xlab="", ylab="")
for(i in 5:9){
iq = c(0,i/10)
dat.wpq = WtProjQuantProfile(dat, iq, 1000, 100, 0.5, 0.1, 0.9)
if(isEllipse)
lines(ellipse(sig, level=iq), col="blue")
lines(dat.wpq[,1], dat.wpq[,2], lty=2, col="red")
}
par(mfrow=c(1,1))
}
PwPplot(X2, t1="c.",t2="d.")
PwPplot(X3, t1="e.",t2="f.")
PwPplot(X4, t1="g.",t2="h.")
par
PwPplot = function(dat, isEllipse=F, sig=NULL, t1, t2){
par(mfrow=c(1,2), mar=rep(0,4))
plot(dat, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.1),
main=t1, xlab="", ylab="")
for(i in 5:9){
iq = c(0,i/10)
dat.pq = ProjQuant(dat, iq, 1000)
lines(dat.pq[,1], dat.pq[,2], lty=2, col="red")
}
# WPQ
plot(dat, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.1),
main=t2, xlab="", ylab="")
for(i in 5:9){
iq = c(0,i/10)
dat.wpq = WtProjQuantProfile(dat, iq, 1000, 100, 0.5, 0.1, 0.9)
if(isEllipse)
lines(ellipse(sig, level=iq), col="blue")
lines(dat.wpq[,1], dat.wpq[,2], lty=2, col="red")
}
par(mfrow=c(1,1))
}
PwPplot(X2, t1="c.",t2="d.")
PwPplot = function(dat, isEllipse=F, sig=NULL, t1, t2){
par(mfrow=c(1,2))
plot(dat, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.1),
main=t1, xlab="", ylab="")
for(i in 5:9){
iq = c(0,i/10)
dat.pq = ProjQuant(dat, iq, 1000)
lines(dat.pq[,1], dat.pq[,2], lty=2, col="red")
}
# WPQ
plot(dat, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.1),
main=t2, xlab="", ylab="")
for(i in 5:9){
iq = c(0,i/10)
dat.wpq = WtProjQuantProfile(dat, iq, 1000, 100, 0.5, 0.1, 0.9)
if(isEllipse)
lines(ellipse(sig, level=iq), col="blue")
lines(dat.wpq[,1], dat.wpq[,2], lty=2, col="red")
}
par(mfrow=c(1,1))
}
PwPplot(X2, t1="c.",t2="d.")
PwPplot(X1, isEllipse = T, sig=sig, t1="a",t2="b")
rm(list=ls())
set.seed(10092014)
library(inline)
library(Rcpp)
library(RcppArmadillo)
library(RcppEigen)
library(ellipse)
## cpp source file
sourceCpp("ProjQuantile.cpp", verbose=TRUE, rebuild=FALSE);
## function to generate from multivariate normal
my.mvrnorm = function(n, mu, Sigma){
p = length(mu)
# compute square root of covariance matrix
eo=eigen(Sigma, symmetric=TRUE)
sigma.sqrt=eo$vec%*%diag(eo$val^0.5)%*%t(eo$vec)
# generate random normals from runif by box-muller transform
rnorm.vec = sqrt(-2*log(runif(n*p)))*cos(2*pi*runif(n*p))
# generate sample matrix
sample.matrix = matrix(rep(mu, n), nrow=n, byrow=T) +
matrix(rnorm.vec, nrow=n, ncol=p)%*%sigma.sqrt
return(sample.matrix)
}
## function for PQ and WPQ plots for given data
PwPplot = function(dat, isEllipse=F, sig=NULL, t1, t2){
par(mfrow=c(1,2))
plot(dat, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.1),
main=t1, xlab="", ylab="")
for(i in 5:9){
iq = c(0,i/10)
dat.pq = ProjQuant(dat, iq, 1000)
lines(dat.pq[,1], dat.pq[,2], lty=2, col="red")
}
# WPQ
plot(dat, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.1),
main=t2, xlab="", ylab="")
for(i in 5:9){
iq = c(0,i/10)
dat.wpq = WtProjQuantProfile(dat, iq, 1000, 100, 0.5, 0.1, 0.9)
if(isEllipse)
lines(ellipse(sig, level=iq), col="blue")
lines(dat.wpq[,1], dat.wpq[,2], lty=2, col="red")
}
par(mfrow=c(1,1))
}
n = 1e4
## Simulating from Bivariate normal, mean (0,0), Sigma = ((1 .5), (.5 1))
sig = matrix(c(1,.5,.5,1), nrow=2)
X1 = my.mvrnorm(n, mu=c(0,0), Sigma=sig)
PwPplot(X1, isEllipse = T, sig=sig, t1="a",t2="b")
for(i in 5:9){
iq = c(0,i/10)
plot(ellipse(sig, level=iq), col="blue")
}
for(i in 5:9){
iq = c(0,i/10)
plot(ellipse(sig, level=iq), col="blue", type="l")
}
?ellipse
ellipse(sig, n=10)
plot(ellipse(sig, n=10))
plot(ellipse(sig, n=10, level=.9))
lines(ellipse(sig, n=10, level=.9))
lines(ellipse(sig, n=100, level=.9))
PwPplot = function(dat, isEllipse=F, sig=NULL, t1, t2){
par(mfrow=c(1,2))
plot(dat, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.1),
main=t1, xlab="", ylab="")
for(i in 5:9){
iq = c(0,i/10)
dat.pq = ProjQuant(dat, iq, 1000)
lines(dat.pq[,1], dat.pq[,2], lty=2, col="red")
}
# WPQ
plot(dat, pch=19, cex=.1, col=adjustcolor("black", alpha.f=.1),
main=t2, xlab="", ylab="")
for(i in 5:9){
iq = c(0,i/10)
dat.wpq = WtProjQuantProfile(dat, iq, 1000, 100, 0.5, 0.1, 0.9)
if(isEllipse)
lines(ellipse(sig, level=i/10), col="blue")
lines(dat.wpq[,1], dat.wpq[,2], lty=2, col="red")
}
par(mfrow=c(1,1))
}
PwPplot(X1, isEllipse = T, sig=sig, t1="a",t2="b")
X1 = my.mvrnorm(5e3, mu=c(0,0), Sigma=sig)
PwPplot(X1, isEllipse = T, sig=sig, t1="a",t2="b")
PwPplot(X1, isEllipse = T, sig=sig, t1="a.",t2="b.")
