setwd("C:/Study/My projects/Quantiles/Codes/SBM")
rm(list=ls());
library(inline)
library(Rcpp)
library(RcppArmadillo)
library(RcppEigen)
library(fda.usc)
sourceCpp("ProjQuantNew.cpp", verbose=TRUE, rebuild=FALSE);
## function for empirical PQD
EPQD = function(X, xx){
p = ncol(X)
Fuxu.vec = rep(0,100)
for(iu in 1:100){
u = rnorm(p); u = u/sqrt(sum(u^2))
uecdf = ecdf(X%*%u)
Fuxu.vec[iu] = uecdf(xx%*%u)
}
1/(1+max(abs(Fuxu.vec-.5)))
}
## function to compute outlier score
outlier.score = function(X, type, k=NULL){
n = nrow(X)
if(is.null(k)){
k = floor(.1*n)
}
depth.vec = rep(0,n)
knn.vec = rep(0,n)
# calculate distance matrix for full data
dist.mat = as.matrix(dist(X))
# get depth and knn average dist for all data
for(i in 1:n){
if(type==1){
depth.vec[i] = ProjQuantileDepthMod(X[-i,], X[i,], .99)
}
else{
depth.vec[i] = EPQD(X[-i,], X[i,])
}
ik = order(dist.mat[i,])[1:k]
knn.vec[i] = mean(dist.mat[i,ik])
}
return(log(knn.vec/depth.vec))
}
outlier.score = function(X, type, k=NULL){
n = nrow(X)
if(is.null(k)){
k = floor(.1*n)
}
depth.vec = rep(0,n)
knn.vec = rep(0,n)
# calculate distance matrix for full data
dist.mat = as.matrix(dist(X))
# get depth and knn average dist for all data
for(i in 1:n){
if(type==1){
depth.vec[i] = ProjQuantileDepthMod(X[-i,], X[i,], .99)
}
else{
depth.vec[i] = EPQD(X[-i,], X[i,])
}
ik = order(dist.mat[i,])[1:k]
knn.vec[i] = mean(dist.mat[i,ik])
}
return(log(depth.vec))
}
set.seed(11182014)
X1 = matrix(rnorm(450), ncol=2)
X2 = matrix(rnorm(50)+sample(c(5:8), 50, replace=T), ncol=2)
label.vec = c(rep("1",225), rep("2", 25))
X = rbind(X1,X2)
score.vec = outlier.score(X, type=2)
cols = c(rep("red",225), rep("green", 35))
par(mfrow=c(1,2))
plot(score.vec, col=cols, pch=19, cex=.5)
abline(h=quantile(score.vec,.95), lty=2, lwd=2)
abline(h=quantile(score.vec,.05), lty=2, lwd=2)
q9 = quantile(score.vec,.95)
col.vec = ifelse(score.vec>q9, "darkred", "darkgreen")
plot(X, pch=label.vec, col=col.vec)
par(mfrow=c(1,1))
set.seed(11182014)
X1 = matrix(rnorm(450), ncol=2)
X2 = matrix(rnorm(50)+sample(c(5:8), 50, replace=T), ncol=2)
label.vec = c(rep("1",225), rep("2", 25))
X = rbind(X1,X2)
score.vec = outlier.score(X, type=1)
cols = c(rep("red",225), rep("green", 35))
par(mfrow=c(1,2))
plot(score.vec, col=cols, pch=19, cex=.5)
abline(h=quantile(score.vec,.95), lty=2, lwd=2)
abline(h=quantile(score.vec,.05), lty=2, lwd=2)
q9 = quantile(score.vec,.95)
col.vec = ifelse(score.vec>q9, "darkred", "darkgreen")
plot(X, pch=label.vec, col=col.vec)
par(mfrow=c(1,1))
outlier.score = function(X, type, k=NULL){
n = nrow(X)
if(is.null(k)){
k = floor(.1*n)
}
depth.vec = rep(0,n)
knn.vec = rep(0,n)
# calculate distance matrix for full data
dist.mat = as.matrix(dist(X))
# get depth and knn average dist for all data
for(i in 1:n){
if(type==1){
depth.vec[i] = ProjQuantileDepthMod(X[-i,], X[i,], .99)
}
else{
depth.vec[i] = EPQD(X[-i,], X[i,])
}
ik = order(dist.mat[i,])[1:k]
knn.vec[i] = mean(dist.mat[i,ik])
}
return(log(knn.vec/depth.vec))
}
## simulated data
## Setup 1... bivariate normal.. 10% contamination far away
set.seed(11182014)
X1 = matrix(rnorm(450), ncol=2)
X2 = matrix(rnorm(50)+sample(c(5:8), 50, replace=T), ncol=2)
label.vec = c(rep("1",225), rep("2", 25))
X = rbind(X1,X2)
score.vec = outlier.score(X, type=1)
cols = c(rep("red",225), rep("green", 35))
par(mfrow=c(1,2))
plot(score.vec, col=cols, pch=19, cex=.5)
abline(h=quantile(score.vec,.95), lty=2, lwd=2)
abline(h=quantile(score.vec,.05), lty=2, lwd=2)
q9 = quantile(score.vec,.95)
col.vec = ifelse(score.vec>q9, "darkred", "darkgreen")
plot(X, pch=label.vec, col=col.vec)
par(mfrow=c(1,1))
score.vec = outlier.score(X, type=2)
cols = c(rep("red",225), rep("green", 35))
par(mfrow=c(1,2))
plot(score.vec, col=cols, pch=19, cex=.5)
abline(h=quantile(score.vec,.95), lty=2, lwd=2)
abline(h=quantile(score.vec,.05), lty=2, lwd=2)
q9 = quantile(score.vec,.95)
col.vec = ifelse(score.vec>q9, "darkred", "darkgreen")
plot(X, pch=label.vec, col=col.vec)
par(mfrow=c(1,1))
outlier.score = function(X, type, k=NULL){
n = nrow(X)
if(is.null(k)){
k = floor(.1*n)
}
depth.vec = rep(0,n)
knn.vec = rep(0,n)
# calculate distance matrix for full data
dist.mat = as.matrix(dist(X))
# get depth and knn average dist for all data
for(i in 1:n){
if(type==1){
depth.vec[i] = ProjQuantileDepthMod(X[-i,], X[i,], .99)
}
else{
depth.vec[i] = EPQD(X[-i,], X[i,])
}
ik = order(dist.mat[i,])[1:k]
knn.vec[i] = mean(dist.mat[i,ik])
}
return(log(knn.vec/depth.vec))
}
set.seed(11182014)
X1 = matrix(rnorm(450), ncol=2)
X2 = matrix(rnorm(50)+sample(c(5:8), 50, replace=T), ncol=2)
label.vec = c(rep("1",225), rep("2", 25))
X = rbind(X1,X2)
score.vec = outlier.score(X, type=2)
cols = c(rep("red",225), rep("green", 35))
par(mfrow=c(1,2))
plot(score.vec, col=cols, pch=19, cex=.5)
abline(h=quantile(score.vec,.95), lty=2, lwd=2)
abline(h=quantile(score.vec,.05), lty=2, lwd=2)
q9 = quantile(score.vec,.95)
col.vec = ifelse(score.vec>q9, "darkred", "darkgreen")
plot(X, pch=label.vec, col=col.vec)
par(mfrow=c(1,1))
score.vec = outlier.score(X, type=1)
cols = c(rep("red",225), rep("green", 35))
par(mfrow=c(1,2))
plot(score.vec, col=cols, pch=19, cex=.5)
abline(h=quantile(score.vec,.95), lty=2, lwd=2)
abline(h=quantile(score.vec,.05), lty=2, lwd=2)
q9 = quantile(score.vec,.95)
col.vec = ifelse(score.vec>q9, "darkred", "darkgreen")
plot(X, pch=label.vec, col=col.vec)
par(mfrow=c(1,1))
set.seed(11182014)
X1 = matrix(rcauchy(450), ncol=2)
X2 = matrix(rcauchy(50)+sample(c(5:8), 50, replace=T), ncol=2)
label.vec = c(rep("1",225), rep("2", 25))
X = rbind(X1,X2)
score.vec = outlier.score(X, type=1)
cols = c(rep("red",225), rep("green", 35))
par(mfrow=c(1,2))
plot(score.vec, col=cols, pch=19, cex=.5)
abline(h=quantile(score.vec,.95), lty=2, lwd=2)
abline(h=quantile(score.vec,.05), lty=2, lwd=2)
q9 = quantile(score.vec,.95)
col.vec = ifelse(score.vec>q9, "darkred", "darkgreen")
plot(X, pch=label.vec, col=col.vec)
par(mfrow=c(1,1))
score.vec = outlier.score(X, type=2)
cols = c(rep("red",225), rep("green", 35))
par(mfrow=c(1,2))
plot(score.vec, col=cols, pch=19, cex=.5)
abline(h=quantile(score.vec,.95), lty=2, lwd=2)
abline(h=quantile(score.vec,.05), lty=2, lwd=2)
q9 = quantile(score.vec,.95)
col.vec = ifelse(score.vec>q9, "darkred", "darkgreen")
plot(X, pch=label.vec, col=col.vec)
par(mfrow=c(1,1))
set.seed(11182014)
X1 = matrix(rnorm(450), ncol=2)
X2 = matrix(rnorm(50)+sample(c(5:8), 50, replace=T), ncol=2)
label.vec = c(rep("1",225), rep("2", 25))
X = rbind(X1,X2)
score.vec = outlier.score(X, type=1)
cols = c(rep("red",225), rep("green", 35))
par(mfrow=c(1,2))
plot(score.vec, col=cols, pch=19, cex=.5)
abline(h=quantile(score.vec,.95), lty=2, lwd=2)
abline(h=quantile(score.vec,.05), lty=2, lwd=2)
q9 = quantile(score.vec,.95)
col.vec = ifelse(score.vec>q9, "darkred", "darkgreen")
plot(X, pch=label.vec, col=col.vec)
par(mfrow=c(1,1))
outlier.score = function(X, type, k=NULL){
set.seed(11182014)
X1 = matrix(rnorm(450), ncol=2)
X2 = matrix(rnorm(50)+sample(c(5:8), 50, replace=T), ncol=2)
label.vec = c(rep("1",225), rep("2", 25))
X = rbind(X1,X2)
score.vec = outlier.score(X, type=2)
cols = c(rep("red",225), rep("green", 35))
par(mfrow=c(1,2))
plot(score.vec, col=cols, pch=19, cex=.5)
abline(h=quantile(score.vec,.95), lty=2, lwd=2)
abline(h=quantile(score.vec,.05), lty=2, lwd=2)
q9 = quantile(score.vec,.95)
col.vec = ifelse(score.vec>q9, "darkred", "darkgreen")
plot(X, pch=label.vec, col=col.vec)
par(mfrow=c(1,1))
set.seed(11182014)
X1 = matrix(rt(450,4), ncol=2)
X2 = matrix(rt(50,4)+sample(c(5:8), 50, replace=T), ncol=2)
label.vec = c(rep("1",225), rep("2", 25))
X = rbind(X1,X2)
score.vec = outlier.score(X, type=2)
cols = c(rep("red",225), rep("green", 35))
par(mfrow=c(1,2))
plot(score.vec, col=cols, pch=19, cex=.5)
abline(h=quantile(score.vec,.95), lty=2, lwd=2)
abline(h=quantile(score.vec,.05), lty=2, lwd=2)
q9 = quantile(score.vec,.95)
col.vec = ifelse(score.vec>q9, "darkred", "darkgreen")
plot(X, pch=label.vec, col=col.vec)
par(mfrow=c(1,1))
set.seed(11182014)
X1 = matrix(rnorm(450), ncol=2)
X2 = matrix(rnorm(50)+sample(c(5:8), 50, replace=T), ncol=2)
label.vec = c(rep("1",225), rep("2", 25))
X = rbind(X1,X2)
score.vec = outlier.score(X, type=2)
cols = c(rep("red",225), rep("green", 35))
par(mfrow=c(1,2))
plot(score.vec, col=cols, pch=19, cex=.5)
abline(h=quantile(score.vec,.95), lty=2, lwd=2)
abline(h=quantile(score.vec,.05), lty=2, lwd=2)
q9 = quantile(score.vec,.95)
col.vec = ifelse(score.vec>q9, "darkred", "darkgreen")
plot(X, pch=label.vec, col=col.vec)
par(mfrow=c(1,1))
set.seed(11182014)
X1 = matrix(rnorm(450), ncol=2)
X2 = matrix(rnorm(50)+7, ncol=2)
label.vec = c(rep("1",225), rep("2", 25))
X = rbind(X1,X2)
score.vec = outlier.score(X, type=2)
cols = c(rep("red",225), rep("green", 35))
par(mfrow=c(1,2))
plot(score.vec, col=cols, pch=19, cex=.5)
abline(h=quantile(score.vec,.95), lty=2, lwd=2)
abline(h=quantile(score.vec,.05), lty=2, lwd=2)
q9 = quantile(score.vec,.95)
col.vec = ifelse(score.vec>q9, "darkred", "darkgreen")
plot(X, pch=label.vec, col=col.vec)
par(mfrow=c(1,1))
score.vec = outlier.score(X, type=1)
cols = c(rep("red",225), rep("green", 35))
par(mfrow=c(1,2))
plot(score.vec, col=cols, pch=19, cex=.5)
abline(h=quantile(score.vec,.95), lty=2, lwd=2)
abline(h=quantile(score.vec,.05), lty=2, lwd=2)
q9 = quantile(score.vec,.95)
col.vec = ifelse(score.vec>q9, "darkred", "darkgreen")
plot(X, pch=label.vec, col=col.vec)
par(mfrow=c(1,1))
set.seed(11182014)
X1 = matrix(rnorm(950), ncol=2)
X2 = matrix(rnorm(50)+7, ncol=2)
label.vec = c(rep("1",225), rep("2", 25))
X = rbind(X1,X2)
score.vec = outlier.score(X, type=1)
cols = c(rep("red",225), rep("green", 35))
par(mfrow=c(1,2))
plot(score.vec, col=cols, pch=19, cex=.5)
abline(h=quantile(score.vec,.95), lty=2, lwd=2)
abline(h=quantile(score.vec,.05), lty=2, lwd=2)
q9 = quantile(score.vec,.95)
col.vec = ifelse(score.vec>q9, "darkred", "darkgreen")
plot(X, pch=label.vec, col=col.vec)
par(mfrow=c(1,1))
set.seed(11182014)
X1 = matrix(rnorm(950), ncol=2)
X2 = matrix(rnorm(50)+7, ncol=2)
label.vec = c(rep("1",225), rep("2", 25))
X = rbind(X1,X2)
score.vec = outlier.score(X, type=1)
cols = c(rep("red",475), rep("green", 25))
par(mfrow=c(1,2))
plot(score.vec, col=cols, pch=19, cex=.5)
abline(h=quantile(score.vec,.95), lty=2, lwd=2)
abline(h=quantile(score.vec,.05), lty=2, lwd=2)
q9 = quantile(score.vec,.95)
col.vec = ifelse(score.vec>q9, "darkred", "darkgreen")
plot(X, pch=label.vec, col=col.vec)
par(mfrow=c(1,1))
score.vec = outlier.score(X, type=2)
cols = c(rep("red",475), rep("green", 25))
par(mfrow=c(1,2))
plot(score.vec, col=cols, pch=19, cex=.5)
abline(h=quantile(score.vec,.95), lty=2, lwd=2)
abline(h=quantile(score.vec,.05), lty=2, lwd=2)
q9 = quantile(score.vec,.95)
col.vec = ifelse(score.vec>q9, "darkred", "darkgreen")
plot(X, pch=label.vec, col=col.vec)
par(mfrow=c(1,1))
X1 = matrix(rnorm(950), ncol=2)
X2 = matrix(rnorm(50)+7, ncol=2)
label.vec = c(rep("1",225), rep("2", 25))
X = rbind(X1,X2)
score.vec = outlier.score(X, type=2)
cols = c(rep("red",475), rep("green", 25))
par(mfrow=c(1,2))
plot(score.vec, col=cols, pch=19, cex=.5)
abline(h=quantile(score.vec,.95), lty=2, lwd=2)
abline(h=quantile(score.vec,.05), lty=2, lwd=2)
q9 = quantile(score.vec,.95)
col.vec = ifelse(score.vec>q9, "darkred", "darkgreen")
plot(X, pch=label.vec, col=col.vec)
par(mfrow=c(1,1))
set.seed(11182014)
X1 = matrix(rnorm(950), ncol=2)
X2 = matrix(rnorm(50)+7, ncol=2)
label.vec = c(rep("1",475), rep("2", 25))
X = rbind(X1,X2)
score.vec = outlier.score(X, type=2)
cols = c(rep("red",475), rep("green", 25))
par(mfrow=c(1,2))
plot(score.vec, col=cols, pch=19, cex=.5)
abline(h=quantile(score.vec,.95), lty=2, lwd=2)
abline(h=quantile(score.vec,.05), lty=2, lwd=2)
q9 = quantile(score.vec,.95)
col.vec = ifelse(score.vec>q9, "darkred", "darkgreen")
plot(X, pch=label.vec, col=col.vec)
par(mfrow=c(1,1))
set.seed(11182014)
X1 = matrix(rnorm(950), ncol=2)
X2 = matrix(rnorm(50)+sample(5:8, 50, replace=T), ncol=2)
label.vec = c(rep("1",475), rep("2", 25))
X = rbind(X1,X2)
score.vec = outlier.score(X, type=2)
cols = c(rep("red",475), rep("green", 25))
par(mfrow=c(1,2))
plot(score.vec, col=cols, pch=19, cex=.5)
abline(h=quantile(score.vec,.95), lty=2, lwd=2)
abline(h=quantile(score.vec,.05), lty=2, lwd=2)
q9 = quantile(score.vec,.95)
col.vec = ifelse(score.vec>q9, "darkred", "darkgreen")
plot(X, pch=label.vec, col=col.vec)
par(mfrow=c(1,1))
score.vec = outlier.score(X, type=1)
cols = c(rep("red",475), rep("green", 25))
par(mfrow=c(1,2))
plot(score.vec, col=cols, pch=19, cex=.5)
abline(h=quantile(score.vec,.95), lty=2, lwd=2)
abline(h=quantile(score.vec,.05), lty=2, lwd=2)
q9 = quantile(score.vec,.95)
col.vec = ifelse(score.vec>q9, "darkred", "darkgreen")
plot(X, pch=label.vec, col=col.vec)
par(mfrow=c(1,1))
set.seed(11182014)
X1 = matrix(rnorm(950), ncol=2)
X2 = matrix(rnorm(50)+sample(c(5:8, -8:-5), 50, replace=T), ncol=2)
label.vec = c(rep("1",475), rep("2", 25))
X = rbind(X1,X2)
score.vec = outlier.score(X, type=2)
cols = c(rep("red",475), rep("green", 25))
par(mfrow=c(1,2))
plot(score.vec, col=cols, pch=19, cex=.5)
abline(h=quantile(score.vec,.95), lty=2, lwd=2)
abline(h=quantile(score.vec,.05), lty=2, lwd=2)
q9 = quantile(score.vec,.95)
col.vec = ifelse(score.vec>q9, "darkred", "darkgreen")
plot(X, pch=label.vec, col=col.vec)
par(mfrow=c(1,1))
score.vec = outlier.score(X, type=1)
cols = c(rep("red",475), rep("green", 25))
par(mfrow=c(1,2))
plot(score.vec, col=cols, pch=19, cex=.5)
abline(h=quantile(score.vec,.95), lty=2, lwd=2)
abline(h=quantile(score.vec,.05), lty=2, lwd=2)
q9 = quantile(score.vec,.95)
col.vec = ifelse(score.vec>q9, "darkred", "darkgreen")
plot(X, pch=label.vec, col=col.vec)
par(mfrow=c(1,1))
outlier.score = function(X, type, k=NULL){
n = nrow(X)
if(is.null(k)){
k = floor(.1*n)
}
depth.vec = rep(0,n)
knn.vec = rep(0,n)
# calculate distance matrix for full data
dist.mat = as.matrix(dist(X))
# get depth and knn average dist for all data
for(i in 1:n){
if(type==1){
depth.vec[i] = ProjQuantileDepthMod(X[-i,], X[i,], .5)
}
else{
depth.vec[i] = EPQD(X[-i,], X[i,])
}
ik = order(dist.mat[i,])[1:k]
knn.vec[i] = mean(dist.mat[i,ik])
}
return(log(knn.vec/depth.vec))
}
set.seed(11182014)
X1 = matrix(rnorm(950), ncol=2)
X2 = matrix(rnorm(50)+sample(c(5:8, -8:-5), 50, replace=T), ncol=2)
label.vec = c(rep("1",475), rep("2", 25))
X = rbind(X1,X2)
score.vec = outlier.score(X, type=1)
cols = c(rep("red",475), rep("green", 25))
par(mfrow=c(1,2))
plot(score.vec, col=cols, pch=19, cex=.5)
abline(h=quantile(score.vec,.95), lty=2, lwd=2)
abline(h=quantile(score.vec,.05), lty=2, lwd=2)
q9 = quantile(score.vec,.95)
col.vec = ifelse(score.vec>q9, "darkred", "darkgreen")
plot(X, pch=label.vec, col=col.vec)
par(mfrow=c(1,1))
par(mfrow=c(1,2))
plot(score.vec, col=cols, pch=19, cex=.5)
abline(h=quantile(score.vec,.95), lty=2, lwd=2)
abline(h=quantile(score.vec,.05), lty=2, lwd=2)
q9 = quantile(score.vec,.9)
col.vec = ifelse(score.vec>q9, "darkred", "darkgreen")
plot(X, pch=label.vec, col=col.vec)
par(mfrow=c(1,1))
par(mfrow=c(1,2))
plot(score.vec, col=cols, pch=19, cex=.5)
abline(h=quantile(score.vec,.95), lty=2, lwd=2)
abline(h=quantile(score.vec,.05), lty=2, lwd=2)
q9 = quantile(score.vec,.8)
col.vec = ifelse(score.vec>q9, "darkred", "darkgreen")
plot(X, pch=label.vec, col=col.vec)
par(mfrow=c(1,1))
par(mfrow=c(1,2))
plot(score.vec, col=cols, pch=19, cex=.5)
abline(h=quantile(score.vec,.95), lty=2, lwd=2)
abline(h=quantile(score.vec,.05), lty=2, lwd=2)
q9 = quantile(score.vec,.9)
col.vec = ifelse(score.vec>q9, "darkred", "darkgreen")
plot(X, pch=label.vec, col=col.vec)
par(mfrow=c(1,1))
par(mfrow=c(1,2))
plot(score.vec, col=cols, pch=19, cex=.5)
abline(h=quantile(score.vec,.95), lty=2, lwd=2)
abline(h=quantile(score.vec,.05), lty=2, lwd=2)
q9 = quantile(score.vec,.95)
col.vec = ifelse(score.vec>q9, "darkred", "darkgreen")
plot(X, pch=label.vec, col=col.vec)
par(mfrow=c(1,1))
score.vec = outlier.score(X, type=2)
cols = c(rep("red",475), rep("green", 25))
par(mfrow=c(1,2))
plot(score.vec, col=cols, pch=19, cex=.5)
abline(h=quantile(score.vec,.95), lty=2, lwd=2)
abline(h=quantile(score.vec,.05), lty=2, lwd=2)
q9 = quantile(score.vec,.95)
col.vec = ifelse(score.vec>q9, "darkred", "darkgreen")
plot(X, pch=label.vec, col=col.vec)
par(mfrow=c(1,1))
par(mfrow=c(1,2))
plot(score.vec, col=cols, pch=19, cex=.5)
abline(h=quantile(score.vec,.95), lty=2, lwd=2)
#abline(h=quantile(score.vec,.05), lty=2, lwd=2)
q9 = quantile(score.vec,.95)
col.vec = ifelse(score.vec>q9, "darkred", "darkgreen")
plot(X, pch=label.vec, col=col.vec)
par(mfrow=c(1,1))
install.packages("DMwR")
require(DMwR)
data(sales)
head(sales)
?sales
